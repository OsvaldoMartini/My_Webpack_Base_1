@{
    ViewBag.Title = "Data Viewer";
    Layout = "~/Views/Shared/_LayoutMain.cshtml";
}

@* Version number *@
@model string

@section page_title
{

    <h2 style="margin-left:-20px;">Data Viewer<i class="icon-doc-text xlarge"></i></h2>
    <script>
        var vm;
        $(document).ready(function () {
            var currentXHR = null;
            var app = new Vue({
                el: '#app',
                data: {
                    loadingThings: false,
                    chunckDataOverTheWire: false,
                    result: {},
                    urlCategory: document.location.pathname.split("/")[3],
                    logs: [
                        { text: "*************************" },
                        { size: 20, text: "Welcome, to browse the data available (and the api calls) click on one of the filters located at the top left hand side of the page." },
                        { size: 18, text: "If no tabs are available then we need to set this category of data up for services." }],

                    AvailableFacets: [
                        //e.g. { key: "STD_COUNTRY", title: "Country", selected: false },
                        //e.g. { key: "STD_REGION", title: "Region", selected: false },
                    ],
                    CurrentFacetData: {
                        key: "",
                        data: [
                            // e.g. "France", "Spain", "Ireland"
                        ]
                    }
                },
                methods: {
                    GetAvailableFacets: function () {
                        var getFacetsString = "/api/@Model/" + app.urlCategory + "/Facets/";
                        app.log(getFacetsString, true);
                        app.tryAbortCurrent();
                        currentXHR = $.get(getFacetsString)
                            .done(function (data) {
                                for (var i = 0; i < data.length; i++) {
                                    app.AvailableFacets.push({ key: data[i].Key, title: data[i].Value, selected: false })
                                        ;
                                }
                                app.loadingThings = false;
                            });
                        app.loadingThings = true;

                    },
                    RefineSearch: function (facetValue, facetKey) {
                        // Simple 1 hit refinement, we are not trying to rewrite the grid & facets
                        app.log("RefineSearch:" + facetValue + ":" + facetKey);
                        app.LoadData("?f=" + facetKey + "(" + facetValue + ")");
                    },
                    ToggleChunk: function () {
                        app.chunckDataOverTheWire = !app.chunckDataOverTheWire;
                    },
                    LoadData: function (filter) {
                        var pageSize = 50;
                        var getDataString = "/api/@Model/" + app.urlCategory + "/Items/";
                        if (filter != undefined) {
                            getDataString += filter + "&num=" + pageSize;
                        }
                        else {
                            getDataString += "?num=" + pageSize;
                        }

                        app.log(getDataString, true);
                        app.tryAbortCurrent();

                        currentXHR = $.get(getDataString)
                            .done(function (result) {
                                app.result = result;
                                app.log("RecordCount: " + result.metaData.RecordCount);

                                var totalRecords = result.metaData.RecordCount;
                                var recordsReceived = result.metaData.PageSize;

                                if (app.chunckDataOverTheWire && (result.metaData.PageSize < result.metaData.RecordCount)) {
                                    // Hit the service multiple times;


                                    var numberOfRequestsRequired = Math.floor(totalRecords / recordsReceived);
                                    if (totalRecords % recordsReceived != 0) {
                                        numberOfRequestsRequired++;
                                    }
                                    var chunkedRequests = [];
                                    for (var i = 1; i < numberOfRequestsRequired; i++) {

                                        var innergetDataString = "/api/@Model/" + app.urlCategory + "/Items/";

                                        if (filter != undefined) {
                                            innergetDataString += filter + "&pg=" + (i + 1) + "&num=" + pageSize;
                                        }
                                        else {
                                            innergetDataString += "?pg=" + (i + 1) + "&num=" + pageSize;
                                        }
                                        app.log(innergetDataString, true);

                                        var chunkedRequest = $.get(innergetDataString)
                                            .done(function (data) {
                                                if (!app.chunckDataOverTheWire) {
                                                    app.loadingThings = false;
                                                    app.log("Stopped Chunk: ******************** ");
                                                    //Abort if user has toggled the chunkedButton;
                                                    _.each(chunkedRequests, function (req) { try { req.abort(); } catch (e) { ; } });
                                                    chunkedRequests = null;
                                                    return;
                                                }
                                                app.result.PageSize += data.Data.length;
                                                app.result.Data.push(data.Data);
                                                if (app.result.PageSize >= app.result.RecordCount) {
                                                    app.result.PageSize = app.result.RecordCount;
                                                    app.loadingThings = false;
                                                }
                                            });
                                        chunkedRequests.push(chunkedRequest);
                                    }

                                }
                                else {
                                    app.loadingThings = false;
                                }
                            });
                        app.loadingThings = true;


                    },

                    LoadFacetData: function (availableFacet) {
                        var getFacetsString = "/api/@Model/" + app.urlCategory + "/Facets/" + availableFacet.key.replace(/\//g, "fslash");
                        app.log(availableFacet.key + " clicked");
                        app.log(getFacetsString, true);

                        // Flag this one as selected. Will bubble to css
                        _.each(app.AvailableFacets, function (af) { af.selected = false });
                        availableFacet.selected = true;

                        app.tryAbortCurrent();
                        currentXHR = $.get(getFacetsString)
                            .done(function (data) {
                                app.CurrentFacetData.data = data;
                                app.CurrentFacetData.key = availableFacet.key;
                                app.loadingThings = false;
                                app.log("#Facets: " + data.length);

                            });
                        app.loadingThings = true;


                    },
                    tryAbortCurrent: function () {
                        if (currentXHR) {
                            try {
                                currentXHR.abort();
                            }
                            catch (e) {
                                app.log("Aborting XHR caused an issue: " + e);
                                ;
                            }


                        }
                    }
                    ,
                    log: function (msg, isLink) {
                        app.logs.unshift({ text: new Date().toLocaleTimeString() + ": " + msg, link: isLink ? msg : "" });
                    }
                }
            });

            //Global for debugging.
            vm = app;

            //Kick off the
            app.GetAvailableFacets();

        });
    </script>
}

@section additional_css
{
    @Styles.Render("~/Content/results")
}

@section additional_scripts
{
    @Scripts.Render("~/bundles/results")
    @Scripts.Render("~/bundles/highstock")
    @Scripts.Render("~/bundles/highstock-export")


}

@section additional_markup
{

    <script src="https://unpkg.com/vue"></script>

    <div id="app">
        <button id="toggleChunk" v-bind:class="{ red: chunckDataOverTheWire }" v-on:click="ToggleChunk">Chunk Data {{chunckDataOverTheWire}}</button>
        <div class="grid" style="margin-left:-30px;">
            <div class="grid-1 grid-md-1-3">
                <div class="grid">
                    <div class="grid-1 grid-md-1-2">
                        <template v-if="AvailableFacets.length > 0">
                            <div class="list-group list-links">
                                <template v-for="availableFacet in AvailableFacets">
                                    <a href="#" class="list-group-item" v-bind:class="{ 'white list-group-item-info ': availableFacet.selected }" v-on:click="LoadFacetData(availableFacet)">{{ availableFacet.title }}<i class="icon-right-open pull-right"></i></a>
                                </template>
                            </div>
                        </template>

                    </div>
                    <div class="grid-1 grid-md-1-2">
                        <template v-if="CurrentFacetData.key!=''">

                            <div style="max-height:400px;overflow-y:auto">
                                <div class="list-group list-links">
                                    <template v-for="facetValue in CurrentFacetData.data">
                                        <a href="#" class="list-group-item" v-on:click="RefineSearch(facetValue, CurrentFacetData.key)">{{ facetValue }}</a>
                                    </template>
                                </div>

                            </div>
                        </template>
                    </div>
                </div>



            </div>
            <div class="grid-1 grid-md-2-3">
                <h3>Headers</h3>
                <div v-if="result.data && result.data.length > 0">
                    {{_.keys(result.data[0])}}
                </div>
                <hr />
                <div class="u-padding-Tn">
                    @*  <button class="btn-link" v-on:click="LoadData()">Load Data</button>*@
                    <div class="u-font-125" v-if="result.data && result.data.length > 0">
                        Results:{{ result.metaData.CurrentPage }} to {{result.metaData.PageSize}} of {{result.metaData.RecordCount}}
                    </div>
                    <div style="max-height:400px;overflow-y:auto;">
                        <ul>
                            <li v-for="item in result.data">
                                {{ item }}
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>


        <div style="border: 1px solid rgb(128, 128, 128);
                padding: 10px;
                margin-top: 10px;
                background-color:#f2f2f2;
                overflow-y: scroll;
                max-height:160px;
                bottom:65px
                ;position:absolute;
                width: 95%;" id="Log">

            <template v-if="loadingThings">
                <div class="loading text sm width-10">Loading...</div>
            </template>

            Log:
            <ul>
                <li v-for="log in logs">
                    <div v-if="log.link">
                        <a v-bind:href="log.link" target="_blank">{{ log.text }}</a>
                    </div>
                    <div v-else>
                        {{ log.text }}
                    </div>
                </li>
            </ul>
        </div>

    </div>
    <style>
        #toggleChunk {
            position: absolute;
            top: 100px;
            right: 100px;
        }
    </style>
}
