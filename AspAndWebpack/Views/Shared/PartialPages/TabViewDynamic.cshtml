@using IHS.Apps.CMP.Models.ViewModels.AandD

@model TabModel

@**

    REQUIRED JAVASCRIPT FILES

    1) TabViewDynamic.js

*@

@**

    THIS TAB VIEW IS FOR DYNAMIC CONTENT.

    E.G. CONTENT WHICH NEEDS TO BE UPDATED WHEN THE TAB IS CLICKED.

    THERE IS A PROPERTY ON THE TAB ITEMS WHICH WILL FORCE THE CONTENT TO
    RELOAD EACH TIME THE TAB GAINS FOCUS

*@

@{
    string linksId = CmpHtmlHelpers.CreateUniqueId("dvTabDynamicLinks");
    string tabContentContainerId = CmpHtmlHelpers.CreateUniqueId("tabContentContainer");

    List<string> tabContentIds = new List<string>();
    for (int i = 0; i < Model.TabItemModels.Count; i++)
    {
        tabContentIds.Add(CmpHtmlHelpers.CreateUniqueId("tabContent"));
    }

}

@{
    if (Model.IsAuthorized)
    {
        <ul id="@linksId" class="nav nav-tabs nav-tabs-line nav-tabs-center nav-tabs-equal-height flex-centered u-padding-Vxxs">
            @{

                var tabToLoad = Model.TabItemModels.FirstOrDefault(p => p.IsAuthorised && p.HasContent && !p.Disabled);
                if (tabToLoad == null)
                {
                    tabToLoad = Model.TabItemModels.FirstOrDefault(p => p.IsAuthorised && !p.Disabled);
                }

                var tabToLoadIndex = tabToLoad == null ? -1 : Model.TabItemModels.IndexOf(tabToLoad);

                for (int i = 0; i < Model.TabItemModels.Count; i++)
                {
                    TabItemModel tabItem = Model.TabItemModels[i];
                    string className = i == tabToLoadIndex ? "active " : string.Empty;
                    className += tabItem.Disabled ? " disabled " : string.Empty;
                    string url = Url.Action(tabItem.Action, tabItem.Controller, tabItem.RouteValues);
                    string contentId = "#" + tabContentIds[i];
                    bool hasLoaded = (i == tabToLoadIndex || tabItem.HasContent);

                    if (tabItem.IsAuthorised)
                    {

                        <li class="@className" title="@tabItem.Tooltip">
                            <a data-tab-title=@tabItem.Title
                               data-tab-content-containerId=@tabContentContainerId
                               data-tab-button="true"
                               data-tab-url="@url"
                               data-tab-content="@contentId"
                               data-tab-loaded="@hasLoaded.ToString().ToLower()"
                               data-tab-reload="@tabItem.ReloadContent.ToString().ToLower()"
                               data-toggle="tab" href="@contentId"
                               @if (tabItem.GoogleAnalytic != null) { @Html.Raw(string.Format(" data-ga-category='{0}'", tabItem.GoogleAnalytic.Category))  @Html.Raw(string.Format(" data-ga-action='{0}'", tabItem.GoogleAnalytic.Action))  @Html.Raw(string.Format(" data-ga-label='{0}'", tabItem.GoogleAnalytic.Label))  @Html.Raw(string.Format(" data-ga-value='{0}'", tabItem.GoogleAnalytic.Value)) }
                               onclick="TabViewDynamic.menuChanged(this)">@tabItem.Title</a>
                        </li>
                    }
                    else
                    {
                        <li class="disabled"><span>@tabItem.Title</span></li>
                    }
                }
            }
        </ul>

        <div id="@tabContentContainerId" class="tab-content u-overflow-y-auto tab-content-dynamic">
            @{
                for (int i = 0; i < tabContentIds.Count; i++)
                {
                    string containerId = tabContentIds[i];

                    string className = "tab-pane fade visible";
                    className += i == tabToLoadIndex ? " active in" : "";

                    <div id="@containerId" class="@className u-padding-Bxs">
                        @{
                            var item = Model.TabItemModels[i];

                            if (item != null && (i == tabToLoadIndex || item.Content != null))
                            {
                                if (!string.IsNullOrEmpty(item.PartialView) && item.HasContent)
                                {
                                    @Html.Partial(item.PartialView, item.Content)
                                }
                                else if (!string.IsNullOrEmpty(Model.PartialView) && item.HasContent)
                                {
                                    @Html.Partial(Model.PartialView, item.Content)
                                }
                                else
                                {
                                    @Html.Action(item.Action, item.Controller, new RouteValueDictionary(item.RouteValues))
                                }
                            }
                        }
                    </div>
                }
            }
        </div>
    }
    else
    {
        @Html.Action("GetViewUnauthorised", "DashboardWidget", new { imagePath = Model.BlurredImagePath })
    }
}