@using IHS.Apps.CMP.Models.Configuration
@using IHS.Apps.CMP.Models.ViewModels
@model ResultsDataModel<IHS.Core.Catalog.Model.IItem>


@{
    foreach (var record in Model.ResultItems)
    {
        <tr class="result-item" data-row-id="@record.Data.ID" data-bind="css : { warning : selectedRecords.indexOf('@record.Data.ID') > -1  }">
            @if (Model.IncludeCheckboxes)
            {
                <td class="checkboxcell row_selector" data-record-id="@record.Data.ID">
                    <input id="chkRow_@record.Data.ID" type="checkbox" data-bind="checked : selectedRecords, value : '@record.Data.ID'">
                    <label for="chkRow_@record.Data.ID"></label>
                </td>
            }

            @foreach (var cell in record.Cells)
            {

                var column = Model.ColumnDefinitions.Columns.FirstOrDefault(p => p.Key.Equals(cell.Key) && p.Visible == true);
                if (column != null && column.Displayed)
                {

                    <td data-colIdx="@(this.GlobalResources(cell.Key).ToLower().Replace(" ", string.Empty))" @Html.Raw(cell.IsFilterable ? "data-filter=\"" + cell.Key + "\"" : string.Empty) class="@(cell.IsNumeric ? "text-right" : string.Empty )" >
                        @{
                            if (cell.ColumnBreak == break_type.before)
                            {
                                <br />
                            }
                            if (string.IsNullOrEmpty(cell.CssClass))
                            {
                                @Html.Partial(cell.PartialViewName, cell)
                            }
                            else
                            {
                                <span class="@cell.CssClass">
                                    @Html.Partial(cell.PartialViewName, cell)
                                </span>
                            }
                            if (cell.ColumnBreak == break_type.after)
                            {
                                <br />
                            }
                            if (cell.IsFilterable && !string.IsNullOrWhiteSpace(cell.Value.ToStringSafe()))
                            {
                                <div class="btn-group btn-group-xs inline-filter">
                                    <button class="btn btn-default" title='Exclude "@cell.Value"' data-bind="click: inlineFilter.bind($data, false), event:{mouseover:indicateFilter.bind($data, true, false), mouseout:indicateFilter.bind($data, false, false), focus:indicateFilter.bind($data, true, false), blur:indicateFilter.bind($data, false, false) }"><i class="icon-minus"></i></button>
                                    <div class="btn btn-default disabled u-padding-Rxs"><i class="icon-filter"></i> Filter</div>
                                    <button class="btn btn-default" title='Filter on "@cell.Value"' data-bind="click: inlineFilter.bind($data, true), event:{mouseover:indicateFilter.bind($data, true, true), mouseout:indicateFilter.bind($data, false, true), focus:indicateFilter.bind($data, true, true), blur:indicateFilter.bind($data, false, true) }"><i class="icon-plus"></i></button>
                                </div>
                            }
                        }
                    </td>
                }
            }
        </tr>
    }


    @*Used by the scrolling technique as we want to append to the existing grid. The below row will get replaced with valid rows.
        Can't just use separate tables because of column widths screwing them up.*@
    <!--SCROLL-APPEND-->
}