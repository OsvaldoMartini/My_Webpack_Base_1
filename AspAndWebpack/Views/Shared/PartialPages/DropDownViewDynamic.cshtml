@using IHS.Apps.CMP.Models.ViewModels.AandD

@model TabModel

@**

    REQUIRED JAVASCRIPT FILES

    1) TabViewDynamic.js

*@

@**

    THIS DROP DOWN VIEW IS FOR DYNAMIC CONTENT.

    E.G. CONTENT WHICH NEEDS TO BE UPDATED WHEN THE SELECTION IS CHANGED.

    THERE IS A PROPERTY ON THE TAB ITEMS WHICH WILL FORCE THE CONTENT TO
    RELOAD EACH TIME THE SELECTION WAS CHANGED
*@

@{
    string linksId = CmpHtmlHelpers.CreateUniqueId("dvTabDynamicLinks");

    List<string> tabContentIds = new List<string>();
    for (int i = 0; i < Model.TabItemModels.Count; i++)
    {
        tabContentIds.Add(CmpHtmlHelpers.CreateUniqueId("tabContent"));
    }

}

@{
    if (Model.IsAuthorized)
    {
        var tabToLoadIndex = -1;
        if (Model.TabItemModels.Count == 1)
        {
            tabToLoadIndex = 0;
        }
        else
        {
            <div class="chosen-container chosen-container-single chosen-with-drop chosen-container-active" style="width: 350px;" title="">
                <select id="@linksId" class="chosen-single chosen-default" style="width: 350px;" onchange="TabViewDynamic.menuChanged(document.getElementById(this.value)); return true;">
                    @{
                        var tabToLoad = Model.TabItemModels.FirstOrDefault(p => p.IsAuthorised && p.HasContent);
                        if (tabToLoad == null)
                        {
                            tabToLoad = Model.TabItemModels.FirstOrDefault(p => p.IsAuthorised);
                        }

                        tabToLoadIndex = tabToLoad == null ? -1 : Model.TabItemModels.IndexOf(tabToLoad);


                        for (int i = 0; i < Model.TabItemModels.Count; i++)
                        {
                            TabItemModel tabItem = Model.TabItemModels[i];
                            string className = i == tabToLoadIndex ? "active" : string.Empty;
                            string url = Url.Action(tabItem.Action, tabItem.Controller, tabItem.RouteValues);
                            string contentId = "#" + tabContentIds[i];
                            bool hasLoaded = i == tabToLoadIndex;

                            if (tabItem.IsAuthorised)
                            {
                                string optionId = CmpHtmlHelpers.CreateUniqueId("option");
                                <option id="@optionId" value="@optionId" class="@className" data-tab-url="@url" data-tab-content="@contentId" data-tab-loaded="@hasLoaded.ToString().ToLower()" data-tab-reload="@tabItem.ReloadContent.ToString().ToLower()" data-toggle="tab" href="@contentId">@tabItem.Title</option>
                            }
                            else
                            {
                                <option class="disabled">@tabItem.Title</option>
                            }
                        }
                    }

                </select>
            </div>
            <br/>
        <br/>
        }

        <div class="tab-content">

            @{
                for (int i = 0; i < tabContentIds.Count; i++)
                {
                    string containerId = tabContentIds[i];

                    string className = "tab-pane fade";
                    className += i == tabToLoadIndex ? " active in" : "";

                    <div id="@containerId" class="@className">

                        @if (i == tabToLoadIndex)
                        {
                            var item = Model.TabItemModels[i];
                            if (item != null)
                            {
                                if (!string.IsNullOrEmpty(Model.PartialView) && item.HasContent)
                                {
                                    @Html.Partial(Model.PartialView, item.Content)
                                }
                                else
                                {
                                    @Html.Action(item.Action, item.Controller, new RouteValueDictionary(item.RouteValues))
                                }
                            }
                        }
                    </div>
                }
            }
        </div>
    }
    else
    {
        @Html.Action("GetViewUnauthorised", "DashboardWidget", new { imagePath = Model.BlurredImagePath })
    }
}
