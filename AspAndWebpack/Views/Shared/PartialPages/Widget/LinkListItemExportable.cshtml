@model IHS.Apps.CMP.Models.ViewModels.LinkFilterExportable
@{
    var exportButton = CmpHtmlHelpers.CreateUniqueId("exportButton");
    var selectContainerId = CmpHtmlHelpers.CreateUniqueId("linkFilter");
}

@if (Model.IsAuthorised)
{

    if (!string.IsNullOrEmpty(Model.NavigateUrl))
    {
        <div class='list-group-item @Model.CssClass @(!string.IsNullOrWhiteSpace(Model.ToolTip) ? "tooltipHolder" : string.Empty)'
             title='@Model.ToolTip'
             @Html.Raw(string.Join(" ", Model.Attributes.Select(a => string.Format(@"{0}=""{1}""", a.Key, a.Value))))>

            @Html.Raw(Model.Text)

            @if (!string.IsNullOrEmpty(Model.HelpData))
            {
                string[] parts = Model.HelpData.Split('|');
                if (parts.Length == 3)
                {
                    <i class="icon-help-circled hand grey2 searchHelp helpButton pull-right" data-toggle="modal" data-target="#helpIndicatorDialog" data-appkey="@parts[0]" data-groupid="@parts[1]" data-itemid="@parts[2]"></i>
                }
            }

            <div class="u-margin-Lxs inline-block">
                <select id="@selectContainerId" data-placeholder="@Model.DropDownMessage" multiple="multiple" class="chosenselect">
                    <option></option>
                    @foreach (var link in Model.SearchableLinks)
                    {
                        <option value="@link.NavigateUrl.Replace("&","$")">@link.Text</option>
                    }
                </select>
            </div>

            <button type="button" id="@exportButton" style="display:none" class="btn btn-primary pull-right" autocomplete="off" onclick="LinkListItemExport('@selectContainerId')">
                @Model.ExportText <i class="icon-link-ext u-margin-Lxs grey2" role="presentation"></i>
            </button>
        </div>
    }
    else
    {
        <div class='list-group-item @Model.CssClass'>
            @Html.Raw(Model.Text)
            @if (!string.IsNullOrEmpty(Model.HelpData))
            {
                string[] parts = Model.HelpData.Split('|');
                if (parts.Length == 3)
                {
                    <i class="icon-help-circled hand grey2 searchHelp helpButton pull-right" data-toggle="modal" data-target="#helpIndicatorDialog" data-appkey="@parts[0]" data-groupid="@parts[1]" data-itemid="@parts[2]"></i>
                }
            }
        </div>
    }
}
else
{
    <div class='list-group-item disabled'>

        @Model.Text
        @if (!string.IsNullOrEmpty(Model.HelpData))
        {
            string[] parts = Model.HelpData.Split('|');
            if (parts.Length == 3)
            {
                <i class="icon-help-circled hand grey2 searchHelp helpButton pull-right" data-toggle="modal" data-target="#helpIndicatorDialog" data-appkey="@parts[0]" data-groupid="@parts[1]" data-itemid="@parts[2]"></i>
            }
        }
        <i class='icon-lock pull-right'></i>
    </div>
}

    <script>
    $(document).ready(function () {

        if (@Model.MaximumItems > 0)
        {
            $("#" + "@selectContainerId").attr("title", "Select a maximum of @Model.MaximumItems options.");
        }


        $("#" + "@selectContainerId").chosen({
            no_results_text: "@Model.NoResultsMessage",
            allow_single_deselect: true,
            max_selected_options : @Model.MaximumItems,
            width: "261px"
        });
    });

    $("#@selectContainerId").on('change',
        function(e) {
            var values = $("#@selectContainerId").chosen().val();
            if (values && values.length) {
                $("#@exportButton").show();
            } else {
                $("#@exportButton").hide();
            }
        });

    if (!window.LinkListItemExport) {
        function LinkListItemExport() {
            var args = $("#@selectContainerId").chosen().val();
            var facetKey = '@Model.FacetKey';
            var search = new Search({
                queryString: "f=" + facetKey + "(" + args.join("||") + ")"
            });

            var commandsVM = new CommandsVM(search);
            commandsVM.exportResults(true);
        };
    }
    </script>

