@using IHS.Apps.CMP.Models
@using IHS.Apps.CMP.Models.Enums
@model IHS.Apps.CMP.Models.Dashboard

@{
    var isDynamicSubject = Model.GetSetting("isDynamicSubject", false);
    string dropDownLabel = string.IsNullOrEmpty(Model.SubjectSelectionLabel) ? string.Concat("Change ", this.LocalResources("~/Views/Shared/Dashboard.cshtml", Model.Type.ToStringSafe())) : Model.SubjectSelectionLabel;
}
@helper SelectOption(DashboardMenuItem item)
{
if (item.SubItems.Count > 0)
{
    <optgroup label="@item.DisplayValue">
        @foreach (var subItem in item.SubItems)
        {
            @SelectOption(subItem)
        }
    </optgroup>
    return;
}
string url = "#";

switch (Model.Type)
{
    case EnumDashboardType.None:
        break;
    case EnumDashboardType.Country:
    case EnumDashboardType.EnergyCountry:
        url = Url.Action("Country", "Dashboard", new { id = item.Value });
        break;
    case EnumDashboardType.Company:
        url = Url.Action("Company", "Dashboard", new { id = item.Value });
        break;
    case EnumDashboardType.Equipment:
        url = Url.Action("Equipment", "Dashboard", new { id = item.Value });
        break;
    case EnumDashboardType.Jmsa:
        url = Url.RouteUrl("CategoryRoute", new { category = "MilitarySecurityAssessments", action = "Country", id = item.Value });
        break;
    case EnumDashboardType.SecurityMilCap:
        url = Url.RouteUrl("CategoryRoute", new { category = "SecurityMilCap", action = "Country", id = item.Value });
        break;
    case EnumDashboardType.SecurityCountryRisk:
        url = Url.RouteUrl("CategoryRoute", new { category = "SecurityCountryRisk", action = "Country", id = item.Value });
        break;
    case EnumDashboardType.DefenceEquipment:
        url = Url.RouteUrl("CategoryRoute", new { category = "DefenceEquipment", action = "Home", tab = item.Value });
        break;
    case EnumDashboardType.Jdb:
        url = Url.RouteUrl("CategoryRoute", new { category = "DefenceBudgetsReports", action = "Country", id = item.Value });
        break;
}

    <option value="@(item.IsAuthorised?url:string.Empty)" disabled="@(!item.IsAuthorised)">@item.DisplayValue</option>
}

<span class="subject-select">

    @if (isDynamicSubject)
    {
        <span class="subject-select">
            <select data-placeholder="@dropDownLabel" style="width:350px;" name="subject" data-bind="
                    value: currentItem,
                    chosen: {allow_single_deselect:true, width:'100px'},
                    options: subjectList,
                    optionsText: 'name',
                    optionsValue: 'subject',
                    valueAllowUnset: true
                    ">
                <option>@Model.Subject</option>
            </select>
        </span>
    }
    else
    {

        using (Html.BeginForm("ChangeSubject", "Dashboard", new { dashboardType = Model.Type }))
        {

            <select data-placeholder="@dropDownLabel" name="subject" onchange="location.href=this.value">
                <option value=""></option>
                @foreach (var item in Model.MenuItems.OrderBy(p => p.DisplayValue))
                {
                    @SelectOption(item)
                }
            </select>
        }
    }
</span>