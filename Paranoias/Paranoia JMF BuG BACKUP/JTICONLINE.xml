<?xml version="1.0" encoding="utf-8"?>
<!-- help on settings in ConfigRules.txt -->
 
<TSQLConfig xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <MetaData>
      <SpecificAttributeMetaData ObjectKey="EVENT_ID" MetaKey="DisplayCrumbAsString" MetaValue="true" />
      <SpecificAttributeMetaData ObjectKey="LAT" MetaKey="crumbLabel" MetaValue="Latitude: " />
      <SpecificAttributeMetaData ObjectKey="LONG" MetaKey="crumbLabel" MetaValue="Longitude: " />
      <SpecificAttributeMetaData ObjectKey="CIVILIAN_KILLED" MetaKey="crumbLabel" MetaValue="Civilians Killed: " />
      <SpecificAttributeMetaData ObjectKey="CIVILIAN_WOUNDED" MetaKey="crumbLabel" MetaValue="Civilians Wounded: " />
      <SpecificAttributeMetaData ObjectKey="CIVILIAN_DETAINED" MetaKey="crumbLabel" MetaValue="Civilians Detained: " />
      <SpecificAttributeMetaData ObjectKey="SECURITY_FORCES_KILLED" MetaKey="crumbLabel" MetaValue="Security Forces Killed: " />
      <SpecificAttributeMetaData ObjectKey="SECURITY_FORCES_WOUNDED" MetaKey="crumbLabel" MetaValue="Security Forces Wounded: " />
      <SpecificAttributeMetaData ObjectKey="SECURITY_FORCES_DETAINED" MetaKey="crumbLabel" MetaValue="Security Forces Detained: " />
      <SpecificAttributeMetaData ObjectKey="SUSPECTS_KILLED" MetaKey="crumbLabel" MetaValue="Suspects Killed: " />
      <SpecificAttributeMetaData ObjectKey="SUSPECTS_WOUNDED" MetaKey="crumbLabel" MetaValue="Suspects Wounded: " />
      <SpecificAttributeMetaData ObjectKey="SUSPECTS_DETAINED" MetaKey="crumbLabel" MetaValue="Suspects Detained: " />
      <SpecificAttributeMetaData ObjectKey="NON_MILITANT_KILLED" MetaKey="crumbLabel" MetaValue="Non Militants Killed: " />
      <SpecificAttributeMetaData ObjectKey="NON_MILITANT_WOUNDED" MetaKey="crumbLabel" MetaValue="Non Militants Wounded: " />
      <SpecificAttributeMetaData ObjectKey="TOTAL_KILLED" MetaKey="crumbLabel" MetaValue="Total Killed: " />
      <SpecificAttributeMetaData ObjectKey="TOTAL_WOUNDED" MetaKey="crumbLabel" MetaValue="Total Wounded: " />
      <SpecificAttributeMetaData ObjectKey="FORMAL_CHARGES" MetaKey="crumbLabel" MetaValue="Formal Charges: " />
      <SpecificAttributeMetaData ObjectKey="CONVICTIONS" MetaKey="crumbLabel" MetaValue="Convictions: " />
      <SpecificAttributeMetaData ObjectKey="ACQUITTALS" MetaKey="crumbLabel" MetaValue="Acquittals: " />
      <SpecificAttributeMetaData ObjectKey="EXTRADITIONS" MetaKey="crumbLabel" MetaValue="Extraditions: " />
      <SpecificAttributeMetaData ObjectKey="APPEALS" MetaKey="crumbLabel" MetaValue="Appeals: " />
      <SpecificAttributeMetaData ObjectKey="OTHER_RESTRAINING_ORDERS" MetaKey="crumbLabel" MetaValue="Other Restrainings Orders: " />

      <SpecificAttributeMetaData ObjectKey="TOP_X" MetaKey="idxGroup" MetaValue="top" />
    </MetaData>
  <Categories>
    <TSQLCategory Name="JTICONLINEEVENTS,JTICONLINEEVENTS1200FEED,JTICONLINEEVENTS1630FEED" Guid="2E6989EC-8DFB-4A6B-995B-E68B1810D715,7E1F4EBA-E5AE-446e-85B4-E04B100F86D7,C514A3D5-D6EF-4afc-B9F8-B3820E95635B" DomainName="JTICONLINE" >
      <JoinConditions>

        FROM CMP_Events e 
        -- (CONSTRAINT_IF_EXISTS::FULLTEXT:: join table exporttable Z - then use z as the alias in the metadata in the xml ::NOTHING::false)
        WHERE 1=1
        AND isnull(e.delete_flag,0) = 0

      </JoinConditions>
      <TSQLQueries>


        <TSQLQuery Name="default" SqlCommand="
                   
          SELECT e.cmp_event_id, 1 as incident_count
          INTO #DOCS
          (JOIN_CONDITIONS)
          GROUP BY cmp_event_id
        
          IF @@rowcount>300
            create index ix_docs on #docs(cmp_event_id)
                   
          -- (PAGED_DATA_INTO_RESULTS_TABLE)  
                    
                   
          (START_PAGING)(COUNT_HINT)
          SELECT  e.id,
                  d.incident_count
          FROM (END_COUNT_HINT) cmp_event e
          INNER JOIN #docs d ON e.id = d.cmp_event_id
          (END_PAGING) 
       
          -- NOW WE HAVE #RESULTS SO WE CAN GO AND GET THE DATA
                    
          SELECT  e.id as ITEMID,
                  e.source_type,
                  case when e.source_type = 'Terrorism and Insurgency' then
                    e.event_id
                  else
                    e.id
                  end as event_id,
                  start_date,
                  d.incident_count,
                  end_date,
                  created,
                  post_date,
                  published,
                  headline,
                  description ,
                  event_country ,
                  event_year, 
                  event_type,
                  significance,
                  E_LATITUDE,
                  E_LONGITUDE,
                  location_name,
                  location_quality,
                  CASE
	                  WHEN e.source_type = 'Intelligence Events' THEN 'IE_'
	                  WHEN e.source_type = 'Terrorism and Insurgency' THEN 'JTIC_'
	                  ELSE ''
                  END AS url_prefix,
                  e.EventActionType,
                  e.EventActionSubType,
                  e.AdditionalFlag
                  
          FROM CMP_EVENT e
          INNER JOIN #RESULTS d ON e.id = d.id

                   ">
        </TSQLQuery>


        <TSQLQuery Name="default_COUNTQUERY" SqlCommand="
         
        SELECT e.cmp_event_id
        INTO #docs
        (JOIN_CONDITIONS)
        GROUP BY e.cmp_event_id
        
        SELECT @@ROWCOUNT AS [COUNT]
                   
        -- (COUNT_HINT) (END_COUNT_HINT)
        
                   ">
        </TSQLQuery>



        <TSQLQuery Name="FlexiChart" SqlCommand="
      --FlexiChart  jtic
	       
        -- qualifying data
        select  cmp_event_id  into #docs
        (JOIN_CONDITIONS)
	        GROUP BY cmp_event_id
          ORDER BY CMP_EVENT_ID
	                
             declare @detailsX varchar(800), @detailsY varchar(800), @detailsG varchar(800), @detailsXCount int, @detailsGCount int;
          
          set @detailsX =  '(CONSTRAINT_IF_EXISTS::CHART_METADATA_X::::abc::true)';
          set @detailsY =  '(CONSTRAINT_IF_EXISTS::CHART_METADATA_Y::::abc::true)';
          set @detailsG =  '(CONSTRAINT_IF_EXISTS::CHART_METADATA_G::::abc::true)';
          set @detailsXCount =  '(CONSTRAINT_IF_EXISTS::CHART_METADATA_XCOUNT::::abc::true)';
          set @detailsGCount =  '(CONSTRAINT_IF_EXISTS::CHART_METADATA_GCOUNT::::abc::true)';
               
          EXEC usp_FlexiChart_JTIC @detailsX, @detailsY, @detailsG, @detailsXCount, @detailsGCount;   
	                
	          --	 (DONT_ADD_ORDERBY)
          --   (DONT_PAGE_DATA)
	          " >
        
        </TSQLQuery>

        
        <TSQLQuery Name="MAP_COUNT" SqlCommand="
										
    declare @zoomLevel int
    , @minX decimal(16,9)
    , @minY decimal(16,9)
    , @maxX decimal(16,9)
    , @maxY decimal(16,9)
    
   
    SET @minX = (CONSTRAINT_IF_EXISTS::MIN_X::::DOESNTEXIST::true);
    SET @minY = (CONSTRAINT_IF_EXISTS::MIN_Y::::DOESNTEXIST::true);
    SET @maxX = (CONSTRAINT_IF_EXISTS::MAX_X::::DOESNTEXIST::true);
    SET @maxY = (CONSTRAINT_IF_EXISTS::MAX_Y::::DOESNTEXIST::true);
    
    with cte as (
    SELECT e.cmp_event_id
     FROM		CMP_Events e
    -- NOTHING
      WHERE 1=1       
    AND isnull(e.delete_flag,0) = 0
    
    group by e.cmp_event_id
     ) 
     
       select newid() ITEMID, count(*) as [count]  from cte
        -- (DONT_PAGE_DATA)(DONT_ADD_ORDERBY)
										">
        </TSQLQuery>



        
        <TSQLQuery Name="MAP_POINTS" SqlCommand="
										
    SELECT source_type, event_id
    into #docs  
    FROM		CMP_Events e
    -- NOTHING
    WHERE 1=1 
    AND isnull(e.delete_flag,0) = 0
    group by source_type, event_id
    
    IF @@rowcount>300
    create index ix_docs on #docs(source_type, event_id)

		select top 5000 e.id as itemid, e.source_type,
      case when e.source_type = 'Terrorism and Insurgency' then
        e.event_id
      else
        e.id
      end as event_id,
      e_longitude x,
	    e_latitude y, 
	    c.headline as title,
      case when len(c.description) > 200 then
		    substring(c.description, 0, 200) + '...'
	    else
		    c.description
		  end as description,
	    0 [count],
	    c.event_country as place,
	    'Point' as geo_field,
	    c.event_type + ' > ' + c.significance as metadata,
	    c.post_date as date
		from #docs e
		inner join cmp_event c on e.source_type = c.source_type AND e.event_id = c.event_id		-- select  top 10 * from cmp_event
    
    WHERE 
       
   ---------------- (CONSTRAINT_IF_EXISTS::MAP_ZOOM_LEVEL:: h.zoom ::DOESNTEXIST::true)  
           (CONSTRAINT_IF_EXISTS::MIN_X:: e_longitude :: 99=99 ::true)                    
       AND   (CONSTRAINT_IF_EXISTS::MIN_Y:: e_latitude :: 99=99 ::true)                 
       AND   (CONSTRAINT_IF_EXISTS::MAX_X:: e_longitude :: 99=99 ::true)                
       AND   (CONSTRAINT_IF_EXISTS::MAX_Y:: e_latitude :: 99=99 ::true)                 
   
          
                   
            /**
            >>
             AND   (CONSTRAINT_IF_EXISTS::MIN_X:: min_x :: 99=99 ::true)      
             AND   (CONSTRAINT_IF_EXISTS::MIN_X:: min_x :: 9=9 ::true)      
            >>       
                   **/
                   
                   
                            -- (DONT_PAGE_DATA)(DONT_ADD_ORDERBY)
										">
        </TSQLQuery>

 
        
        <TSQLQuery Name="MAP_BUBBLE" SqlCommand="
										
    declare @zoomLevel int
    , @minX decimal(16,9)
    , @minY decimal(16,9)
    , @maxX decimal(16,9)
    , @maxY decimal(16,9)
    , @maxItems int
    
    SET @zoomLevel = (CONSTRAINT_IF_EXISTS::MAP_ZOOM_LEVEL::::DOESNTEXIST::true);
    SET @minX = (CONSTRAINT_IF_EXISTS::MIN_X::::DOESNTEXIST::true);
    SET @minY = (CONSTRAINT_IF_EXISTS::MIN_Y::::DOESNTEXIST::true);
    SET @maxX = (CONSTRAINT_IF_EXISTS::MAX_X::::DOESNTEXIST::true);
    SET @maxY = (CONSTRAINT_IF_EXISTS::MAX_Y::::DOESNTEXIST::true);
    SET @maxItems = (CONSTRAINT_IF_EXISTS::MAX_ITEMS::::DOESNTEXIST::true);
    
    SELECT  cmp_event_id
    into #docs  
    FROM CMP_Events e
    -- NOTHING
    WHERE 1=1 
    AND isnull(e.delete_flag,0) = 0
    group by  cmp_event_id
    
    IF @@rowcount>300
    create index ix_docs on #docs(cmp_event_id)

      EXEC usp_cmp_events_getClusterData @zoomLevel, @minX, @minY, @maxX, @maxY, @maxItems;
      
                   
                            -- (DONT_PAGE_DATA)(DONT_ADD_ORDERBY)
										">

          <Parameters>
            <!--<AdapterParameter CodeName="E_LATITUDE" SQLName=" E_LATITUDE " DataType="STRING_TYPE" />
            <AdapterParameter CodeName="E_LONGITUDE" SQLName=" E_LONGITUDE " DataType="STRING_TYPE" />-->
          </Parameters>
        </TSQLQuery>

        


        
        <TSQLQuery Name="ExportAllTemplateQuery_COUNTQUERY" SqlCommand="
         SELECT e.cmp_event_id
         INTO #docs
         (JOIN_CONDITIONS)
         GROUP BY e.cmp_event_id
         
         SELECT @@ROWCOUNT AS [COUNT]
                    
         -- (COUNT_HINT) (END_COUNT_HINT)

                   ">
        </TSQLQuery>

        <TSQLQuery Name="ExportAllTemplateQuery" SqlCommand="
        
        -- +++ REM THIS HAS A SPECIAL COUNT QUERY so dont use (COUNT_HINT)
        --ExportAllTemplateQuery_COUNTQUERY
                   
        -- get the qualifying records
        SELECT  e.cmp_event_id 
        INTO #docs 
        (JOIN_CONDITIONS) 
        GROUP BY e.cmp_event_id
        
        create clustered index ixodskosdkoskdoskdok on #docs(cmp_event_id);
      
        --(PAGED_DATA_INTO_RESULTS_TABLE) -- this inserts paged data into temp table
                   
        (START_PAGING) SELECT e.id
        FROM cmp_event e 
        -- note as its cmp_event not events, we cannot order on too much
		    INNER JOIN #docs d ON e.id = d.cmp_event_id

        (END_PAGING)
  
        -- NOW WE HAVE #RESULTS SO WE CAN GO AND GET THE DATA
                   
      SELECT 
          e.id as itemid, 
          e.source_type, 
          case when e.source_type = 'Terrorism and Insurgency' then
            e.event_id
          else
            e.id
          end as event_id,
          e.E_LATITUDE, 
          e.E_LONGITUDE, 
          e.event_type,
          e.significance,
          e.start_date,
          e.incident_count,
          e.end_date,
          e.created,
          e.post_date,
          e.published,
          e.headline,
          e.description,
          e.event_country,
          e.event_year,
          e.suspects_wounded,
          e.suspects_killed,
          e.suspects_detained,
          e.security_forces_killed,
          e.security_forces_WOUNDED,
          e.security_forces_detained,
          e.civilian_wounded,
          e.civilian_killed,
          e.civilian_detained,
          e.civilian_sf_wounded,
          e.civilian_sf_killed,
          e.civilian_sf_detained,
          e.unidentified_wounded,
          e.unidentified_killed,
          e.unidentified_detained,
          e.non_militant_wounded,
          e.non_militant_killed,
          e.total_killed,
          e.total_wounded,
          e.suspects_killed_operator,
          e.suspects_detained_operator,
          e.sf_killed_operator,
          e.sf_detained_operator,
          e.sf_wounded_operator,
          e.civilian_killed_operator,
          e.civilian_wounded_operator,
          e.civilian_sf_killed_operator,
          e.civilian_sf_detained_operator,
          e.unidentified_wounded_operator,
          e.unidentified_killed_operator,
          e.unidentified_detained_operator,
          e.nm_wounded_operator,
          e.nm_killed_operator,
          e.total_killed_operator,
          e.total_wounded_operator,
          e.International,
          e.location_name,
          CASE
	          WHEN e.source_type = 'Intelligence Events' THEN 'IE_'
	          WHEN e.source_type = 'Terrorism and Insurgency' THEN 'JTIC_'
	          ELSE ''
          END AS url_prefix,
          e.EventActionType,
          e.EventActionSubType,
          e.AdditionalFlag,
          cmp_event_stuffedData.*
   
      FROM cmp_event e
      INNER JOIN cmp_event_stuffedData ON e.id = cmp_event_stuffedData.cmp_event_id
      INNER JOIN #results d ON e.id = d.id
        
                   ">
        </TSQLQuery>


        <TSQLQuery Name="geogroupeddatatable" SqlCommand="
                   
          select cmp_event_id  
          INTO #DOCS
          (JOIN_CONDITIONS)
          
          GROUP BY  cmp_event_id  
         
       
        SELECT  
        (INDEXERS_SQL)
        from  CMP_Event e
        inner join #docs d on e.id = d.cmp_event_id
        inner join political_entity pe on e.event_country = pe.j_name OR e.event_country = pe.ISO_NAME
        GROUP BY 
        (INDEXERS_GROUPBY_SQL)

        (DONT_PAGE_DATA)       
        ">
          <Parameters>
            <AdapterParameter CodeName="EVENT_COUNTRY" SQLName=" pe.[ISO_3166-2] " DataType="STRING_TYPE" />
          </Parameters>
        </TSQLQuery>
        
        <TSQLQuery Name="groupeddatatable" SqlCommand="
                   
          select cmp_event_id  
          INTO #DOCS
          (JOIN_CONDITIONS)
          
          GROUP BY  cmp_event_id  
         
       
        SELECT  
        (INDEXERS_SQL)
        from  CMP_Event e
        inner join #docs d on e.id = d.cmp_event_id
        GROUP BY 
        (INDEXERS_GROUPBY_SQL)

        (DONT_PAGE_DATA)       
        ">
        </TSQLQuery>
        
        <TSQLQuery Name="TOTALINCIDENTCOUNTSEARCH" SqlCommand="
                   
        select  cmp_event_id, incident_count
        INTO #DOCS

                (JOIN_CONDITIONS) 
               GROUP BY  cmp_event_id, incident_count 
   
       
        declare @total_incident_count int 
        set @total_incident_count = (select sum(incident_count) from #docs)
        
        (DONT_PAGE_DATA)       
        (DONT_ADD_ORDERBY)
                   SELECT  0 as itemId,  @total_incident_count as total_incident_count
          ">
        </TSQLQuery>


          <TSQLQuery Name="GEOMAP_WORLDWIDE_STATS" SqlCommand="
          select cmp_event_id INTO #DOCS
                (JOIN_CONDITIONS)
               GROUP BY cmp_event_id
               
              select newid() as ITEMID, event_country,  count(*) as incident_count
              from cmp_event e 
              INNER JOIN #docs d ON e.id = d.cmp_event_id
              where event_country is not null and e.event_type = 'NSAG Attack'
              group by event_country
              
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>

        <TSQLQuery RunInPreFetch="true" Name="GEOMAP_COUNTRY_STATS" SqlCommand="
          select cmp_event_id INTO #DOCS
                (JOIN_CONDITIONS)
               GROUP BY cmp_event_id
               
      --   select top 250 newid() as ITEMID, event_country  , E_LATITUDE, E_LONGITUDE, headline , e.event_id as event_id
        --      from cmp_event e 
        --     inner join #docs d on e.event_id = d.event_id
        --     where e.event_type = 'NSAG Attack'
        --    order by start_date desc 

             SELECT TOP 250 
			        e.event_id
			        into #d1
		        FROM cmp_event e
		        INNER JOIN #docs d ON e.id = d.cmp_event_id
		        WHERE e.event_type = 'NSAG Attack'
		        ORDER BY start_date DESC
	

		        SELECT  
			        newid() AS ITEMID, 
			        event_country, 
			        E_LATITUDE, 
			        E_LONGITUDE, 
			        headline, 
              case when e.source_type = 'Terrorism and Insurgency' then
                e.event_id
              else
                e.id
              end as event_id
		        FROM cmp_event e
		        INNER JOIN #d1 d ON e.event_id = d.event_id
		        WHERE e.event_type = 'NSAG Attack'
		        ORDER BY start_date DESC
    

          (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>
        
        <TSQLQuery Name="FATALITIES_PER_COUNTRY" SqlCommand="
          select cmp_event_id INTO #DOCS
                (JOIN_CONDITIONS)
               GROUP BY cmp_event_id
               
              select newid as itemid , event_country,  sum(total_killed) as total_killed
              from cmp_event e 
              INNER JOIN #docs d ON e.id = d.cmp_event_id
              where event_country is not null 
              group by event_country
              
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>


        <TSQLQuery Name="COUNTRYSTATS" SqlCommand="
                select 1 ItemId, 
                sum(isnull(total_killed,0)) total_killed ,
                sum(isnull(total_wounded,0)) total_wounded ,
                sum(isnull(incident_count,0)) incident_count 
                from cmp_event 
                where 1=1
                 
                (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
                 ">
        </TSQLQuery>

        <TSQLQuery Name="DEADLIESTATTACKS" SqlCommand="
                   
                  select top 5 source_type, event_id itemId, headline, start_date, total_killed , event_country
                  from cmp_event
                  where 1=1
                  order by total_killed desc
                 
                (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
                 ">
        </TSQLQuery>
    
        <TSQLQuery Name="COUNTRY_DROPDOWN_VALUES" SqlCommand="
                   
                  
                  select newid() itemId,   event_country 
                   from cmp_events 
                   where isnull( delete_flag,0) = 0
                   and event_type = 'NSAG Attack'
                   group by event_country
                   order by event_country
                 
                (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
                 ">
        </TSQLQuery>
       

        <TSQLQuery Name="CHARTS1" SqlCommand="
                   
                select newid() itemId, event_year, sum(isnull(total_killed,0)) total_killed, sum(isnull(total_wounded,0)) total_wounded
                from
                cmp_event
                where 1=1
                group by event_year
                order by event_year
                 
                (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
                 ">
        </TSQLQuery>
        
        
        <TSQLQuery Name="FATALITIES_PER_MONTH"   SqlCommand="
          select cmp_event_id INTO #DOCS
                (JOIN_CONDITIONS)
               GROUP BY cmp_event_id
               
 select newid() as itemid,  sum(isnull(total_killed,0)) as total_killed,
  convert(varchar(10),datepart( year,start_date)) + ' - ' + case  when datepart( mm,start_date) > 9 then '' else '0' end +   convert(varchar(10),datepart( mm,start_date)) as YearMonth 
   from cmp_event e
   INNER JOIN #docs d ON e.id = d.cmp_event_id
  group by 
 convert(varchar(10),datepart( year,start_date)) + ' - ' + case when datepart( mm,start_date)  > 9 then '' else '0' end +   convert(varchar(10),datepart( mm,start_date)) 
 order by convert(varchar(10),datepart( year,start_date)) + ' - ' + case when datepart( mm,start_date)  > 9 then '' else '0' end +   convert(varchar(10),datepart( mm,start_date)) desc
              
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>

        
        <TSQLQuery Name="ATTACKS_BY_TACTIC_TYPE" SqlCommand="
       select cmp_event_id


        into #docs
      (JOIN_CONDITIONS)
        GROUP BY cmp_event_id

        -- make sure we only look at say 10 groups
        set rowcount 10
        select distinct(eventActorName) into #actors from cmp_events
        inner join #docs on cmp_events.cmp_event_id = #docs.cmp_event_id
        where
        eventactorname is not null
        and
        eventactorname != 'Unknown'
        set rowcount 0

        select newid() as ITEMID , a.EVENTACTORNAME, tactic, count(*) as incident_count
        from cmp_events
        inner join #docs on cmp_events.cmp_event_id = #docs.cmp_event_id
        inner join #actors a on cmp_events.eventActorName = a.eventActorName
        where tactic is not null
       group by a.EVENTACTORNAME, tactic
        order by a.eventactorname, tactic 
              
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>



        <TSQLQuery Name="TACTIC_TYPE_CHART" SqlCommand="
             
              select cmp_event_id  
		              into #docs
                      (JOIN_CONDITIONS)
                      
	              and event_type = 'NSAG Attack'
	              and Tactic is not null
                  GROUP BY cmp_event_id
   
                select  cmp_event_id,  TACTIC  
                into #final
                from cmp_events 
                where cmp_event_id in (select cmp_event_id from #docs)
                group by    TACTIC , cmp_event_id
 
        
                select newid() ITEMID,   TACTIC ,count(*) numevents from #final 
                group by    TACTIC

                   
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>


        <TSQLQuery Name="EVENTS_PER_MONTH_PER_GROUP_LAST_12_MONTHS" SqlCommand="
        
select cmp_event_id,
                
		max(EVENTACTORNAME) as EVENTACTORNAME
		into #docs
        (JOIN_CONDITIONS)
        and EVENTACTORNAME is not null and eventActorName != 'Unknown'  and start_date &gt; getdate()-365  
               GROUP BY cmp_event_id
               
               
               --create table to hold the last 12 months
               select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number into #months 
               delete from #months
               declare @c int
               set @c = 0;
               while (@c &lt; 12)
               begin
				insert into #months 
				select 
					  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
					, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
					, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))           
				set @c = @c + 1
               end
               
           
           
               --get the data
               select  count(*) numevents , EVENTACTORNAME, event_year, datename(month,start_date )as event_month, datepart(mm,start_date) as month_number
               into #results
               from cmp_event  c
               inner join #docs d on c.id = d.cmp_event_id
                inner join #months m on datepart(yy,c.start_date) = year_number and  datepart(mm,c.start_date)=month_number
                group by EVENTACTORNAME , event_year,datename(month,start_date),datepart(mm,start_date)
               order by event_year, month_number  
               
               
               --get distinct list of eventactors
               select distinct eventactorname into #actors from #results
               
             
               
               -- if there are more than say 10 groups, get the top 10
               select identity(int,1,1) rowid, sum(numevents) numevents, eventactorname 
               into #orderedGroupCounts 
               from #results
               group by eventactorname
               order by sum(numevents) desc
               
               if(select count(*) from #actors ) &gt; 10
	             delete from #actors where eventactorName  in (select eventactorname from #orderedGroupCounts where rowid &gt; 10)
			 
          
               
               set rowcount 0;
               delete from #results where eventactorname not in (select eventactorname from #actors)
              
               
               
               --for each group in eventactorname - make sure their row is full
               insert into #results (numevents, eventactorname, event_year, event_month, month_number)
                   
			  select 0, alloptions.EVENTACTORNAME, year_number, alloptions.monthName,  alloptions.month_number   from 
			  ( select  monthName, eventActorName ,month_number, year_number  from #months   cross join #actors ) AllOptions 
              left join #results r on AllOptions.monthName = r.event_month and AllOptions.eventActorName = r.eventActorName  and alloptions.year_number = r.event_year
              where r.eventActorName is null
              
               -- get the events for the current search criteria over the last year
               select newid() ITEMID, r.numevents as incident_count, r.eventactorName , r.event_month + ' '+ right(event_year,2) as EVENT_MONTH_NAME
               from #results r
               inner join #orderedGroupCounts o on r.eventactorname = o.eventactorname
               order by o.rowid ,event_year asc, month_number asc
              
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>

        <TSQLQuery Name="TOP_GROUPS_PER_COUNTRY_LAST_12_MONTHS" SqlCommand="
       
	      DECLARE @docs TABLE (cmp_event_id int, event_id int not null, eventactorname varchar(500))
        
	     insert into @docs 
	     select cmp_event_id, event_id , max(EVENTACTORNAME) as EVENTACTORNAME
        (JOIN_CONDITIONS)
        and EVENTACTORNAME is not null and eventActorName != 'Unknown'  and start_date &gt; getdate()-365 and event_type = 'NSAG Attack'
        GROUP BY cmp_event_id, event_id

               --get the data
               select  count(*) as numevents , EVENTACTORNAME, event_country
               from cmp_event  c
               inner join @docs d on c.id = d.cmp_event_id
                group by EVENTACTORNAME , event_country 
               order by event_country, numevents desc 

          -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
          " >
                  
                   ">      
        </TSQLQuery>
                   
             
        <TSQLQuery Name="EVENTS_PER_MONTH_PER_COUNTRY_LAST_12_MONTHS" SqlCommand="
        select cmp_event_id,
        
        max(EVENTACTORNAME) as EVENTACTORNAME
        into #docs
        (JOIN_CONDITIONS)
        and start_date &gt; getdate()-365
        GROUP BY cmp_event_id

        -- get the top 10 countries with the most attacks
        select identity(int,1,1) as rowid,  count(*) as numevents, event_country
        into #results
        from cmp_event  c
        inner join #docs d on c.id = d.cmp_event_id
        group by event_country
        order by count(*) desc
        delete from #results where rowid &gt; 10




        --create table to hold the last 12 months
        select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number into #months
        delete from #months
        declare @c int
        set @c = 0;
        while (@c &lt; 12)
        begin
        insert into #months
        select
        datename(month, DateAdd(mm,-1 * @C , getdate() ))
        , datepart(mm, DateAdd(mm,-1 * @C , getdate() ))
        , datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))
        set @c = @c + 1
        end

        --get a matrix of months and countries to populate empty months
        --	drop table #matrix
        -- select * from #matrix
        select monthName, month_number, year_number, event_country, rowid into #matrix from #months cross join #results



        --get the data
        select
        count(*) as numevents,
        o.rowid,
        c.event_country,
        datename(month, start_date) event_Month_Name
        , datepart(mm,start_date) event_Month
        , datepart(yyyy, start_date) event_year
        into #results2
        from cmp_event  c
        inner join #results o on c.event_country = o.event_country
        where c.start_date &gt; getdate()-365
        group by c.event_country ,o.rowid,
        datename(month, start_date)
        , datepart(mm,start_date)
        , datepart(yyyy, start_date)
        order by
        o.rowid, event_year , event_month

        select newid() ITEMID,  year_number event_year, monthName + ' ' + right(m.year_number,2) event_month_name , month_Number event_month, m.event_country, isnull(numevents,0) numevents  from #matrix m left join  #results2 r
        on r.event_month_name = m.monthName and r.event_year = m.year_number and r.event_country = m.event_country
        order by m.rowid, m.year_number, m.month_number

          -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
          " >

        </TSQLQuery>
        
        
        <TSQLQuery Name="EVENTS_PER_MONTH_PER_GROUP_TOTAL" SqlCommand="
         select cmp_event_id,
                
		max(EVENTACTORNAME) as EVENTACTORNAME
		into #docs
         (JOIN_CONDITIONS)
         and EVENTACTORNAME is not null and eventActorName != 'Unknown'   
               GROUP BY cmp_event_id
               
               
               --create table to hold the last 12 months
               select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number into #months 
               delete from #months
               declare @c int
               set @c = 0;
               while (@c &lt; 12)
               begin
				insert into #months 
				select 
					  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
					, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
					, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))           
				set @c = @c + 1
               end
               
           
           
               --get the data
               select  count(*) numevents , EVENTACTORNAME, event_year, datename(month,start_date )as event_month, datepart(mm,start_date) as month_number
               into #results
               from cmp_event  c
               inner join #docs d on c.id = d.cmp_event_id
                inner join #months m on c.event_year = year_number and  datepart(mm,c.start_date)=month_number
                group by EVENTACTORNAME , event_year,datename(month,start_date),datepart(mm,start_date)
               order by event_year, month_number  
               
               
               --get distinct list of eventactors
               select distinct eventactorname into #actors from #results
               
             
               
               -- if there are more than say 10 groups, get th
               while (select count(*) from #actors) &gt; 10
               begin 
					        set rowcount 1 
					        delete from #actors 
               end
               
               set rowcount 0;
               delete from #results where eventactorname not in (select eventactorname from #actors)
              
               
               
               --for each group in eventactorname - make sure their row is full
               insert into #results (numevents, eventactorname, event_year, event_month, month_number)
                   
			  select 0, alloptions.EVENTACTORNAME, year_number, alloptions.monthName,  alloptions.month_number   from 
			  ( select  monthName, eventActorName ,month_number, year_number  from #months   cross join #actors ) AllOptions 
              left join #results r on AllOptions.monthName = r.event_month and AllOptions.eventActorName = r.eventActorName  and alloptions.year_number = r.event_year
              where r.eventActorName is null
              
               -- get the events for the current search criteria over the last year
               select newid() ITEMID, numevents as incident_count, eventactorName , event_month as EVENT_MONTH_NAME
               from #results order by eventactorname,event_year asc, month_number asc
              
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>
        
   
        <TSQLQuery Name="ATTACKS_BY_MODE_LAST_12_MONTHS" SqlCommand="
        select cmp_event_id
        into #docs
        (JOIN_CONDITIONS)
        and start_date > getdate()-365
        and event_type = 'NSAG Attack'
        GROUP BY cmp_event_id

      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)



        select newid() ITEMID, isnull(attack_platform,'') + ' - ' + isnull(attack_weapon,'') ATTACK_MODE , count(*) numevents from cmp_events
        where cmp_event_id in (select cmp_event_id from #docs)
        group by isnull(attack_platform,'') + ' - ' + isnull(attack_weapon,'')
        having isnull(attack_platform,'') + ' - ' + isnull(attack_weapon,'') != ' - '"> 
          
        </TSQLQuery>


        <TSQLQuery Name="ATTACKS_BY_WEAPON_LAST_12_MONTHS" SqlCommand="
       
select cmp_event_id  
		into #docs
      (JOIN_CONDITIONS)  
	and start_date > getdate()-365
	and event_type = 'NSAG Attack'
    GROUP BY cmp_event_id
    
    
  

select newid() ITEMID,  isnull(attack_weapon,'') ATTACK_WEAPON , count(*) numevents from cmp_events 
where cmp_event_id in (select cmp_event_id from #docs)
group by   isnull(attack_weapon,'')
having  isnull(attack_weapon,'') != '' 
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
        
                   ">  </TSQLQuery>




        <TSQLQuery Name="TARGET_PARENT_SECTORS" SqlCommand="
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
                   
   select cmp_event_id 
		into #docs
      (JOIN_CONDITIONS)
	and event_type = 'NSAG Attack'
	and targetParentSector is not null
    GROUP BY cmp_event_id
  

    select  cmp_event_id,  TARGETPARENTSECTOR  
    into #final
    from cmp_events 
    where cmp_event_id in (select cmp_event_id from #docs)
    group by    targetparentsector , cmp_event_id
 
        
    select newid() ITEMID,   TARGETPARENTSECTOR ,count(*) numevents from #final 
    group by    targetparentsector
        
                   ">  </TSQLQuery>



        
        <TSQLQuery Name="TOP_5_TARGET_SECTORS_LAST_12_MONTHS" SqlCommand="
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
     
        --get qualifying records
	select cmp_event_id 
		into #docs
       (JOIN_CONDITIONS)
      and start_date &gt; getdate()-365
        group by cmp_event_id
         
         
         
-- get the targetsectors and counts
	select 
	c.cmp_event_id, c.event_id  , c.start_date, targetSector 
	into #sectorsRaw 
	from cmp_events c 
	inner join #docs d on c.cmp_event_id = d.cmp_event_id
	where targetSector is not null
	group by c.cmp_event_id, c.event_id, c.start_date, targetSector



-- get the top 5 sectors
	select top 5 count(*) theCount,  targetsector into #topsectors from #sectorsRaw  group by targetSector order by count(*) desc



-- now delete non top 5 from raw
	delete from #sectorsRaw where targetsector not in (select targetsector from #topsectors)



-- create month table for last 12
   select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number into #months 
   delete from #months
   declare @c int
   set @c = 0;
   while (@c &lt; 12)
   begin
	insert into #months 
	select 
		  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
		, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
		, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))           
	set @c = @c + 1
   end
   
   
-- get an entry for event targetsector for everymonth
select targetsector, month_number, year_number, 1000000 numevents, monthName  month_name into #results from #months cross join #topsectors
update #results set numevents = 0
 



--- insert any records which exist
select 
	targetsector,
	datepart(mm,start_date) month_number, 
	datename(month, start_date) month_name,
	datepart(yyyy, start_date) event_year,
	count(*) numEvents
into #matches
from #sectorsRaw
group by
	targetsector, 
	datepart(mm,start_date) , 
	datename(month, start_date),
	datepart(yyyy, start_date)

UPDATE	#results 
SET		
		numevents = m.numevents
FROM 
		#results r
		LEFT JOIN #matches m on r.month_number = m.month_number and r.year_number = m.event_year and m.targetSector = r.targetSector
where m.month_number is not null


	
       select newid() ITEMID, r.targetsector , month_Name + ' ' + right(r.year_number,2) as EVENT_MONTH_NAME, r.month_number EVENT_MONTH_OF_YEAR, r.year_number EVENT_YEAR, NUMEVENTS
       from #results  r
       inner join #topsectors t on t.targetsector = r.targetSector
       order by r.targetsector, r.year_number , r.month_number
    
        
        
                   ">  </TSQLQuery>



         

        <TSQLQuery Name="SUICIDE_ATTACKS" SqlCommand="
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
     
        
	select cmp_event_id 
		into #docs
       (JOIN_CONDITIONS)
       and start_date &gt; getdate()-365 and isnull(suicide_attack,'No') != 'No'
        group by cmp_event_id
        

-- create list of months
	select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number,0 casualties,0  suicide_attacks into #months 
	   delete from #months
	   declare @c int
	   set @c = 0;
	   while (@c &lt; 12)
	   begin
		insert into #months 
		select 
			  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
			, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
			, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))        
			, 0 
			, 0   
		set @c = @c + 1
	   end
   
        
    -- get any results
    select 
    datepart(mm,start_date) EVENT_MONTH_OF_YEAR,
    datename(month,start_date) MONTH_NAME ,
    event_year,
    count(*) as suicide_count, 
    sum(isnull(total_killed,0) + isnull(total_wounded,0)) as Casualties 
	into #results
    from cmp_event c
    inner join #docs d on c.id = d.cmp_event_id
    group by 
    event_year,
     datename(month,start_date) ,
     datepart(mm,start_date)
    
   update #months set suicide_attacks = suicide_count, casualties = r.casualties
   from  #months m 
   left join #results r on m.year_number = r.event_year and m.monthName = r.month_name
   where r.event_YEAR is not null
     
    select newid() ITEMID,  monthName + ' ' + right(year_number,2) as EVENT_MONTH_NAME, month_number EVENT_MONTH_OF_YEAR, year_number EVENT_YEAR, CASUALTIES as TOTAL_CASUALTIES, SuICIDE_ATTACKS AS NUMEVENTS
     from #months order by year_number, month_number
    
        
        
                   ">  </TSQLQuery>




        <TSQLQuery Name="CT_OPERATIONS_AND_MILITANT_FATALITIES" SqlCommand="
     
        
select cmp_event_id 
		into #docs
       (JOIN_CONDITIONS)
       and start_date &gt; getdate()-365 AND event_Type = 'CT Operation'
        group by cmp_event_id
  

        

-- create list of months
	select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number,0 NUMEVENTS,0  SUSPECTS_KILLED into #months 
	   delete from #months
	   declare @c int
	   set @c = 0;
	   while (@c &lt; 12)
	   begin
		insert into #months 
		select 
			  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
			, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
			, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))        
			, 0 
			, 0   
		set @c = @c + 1
	   end
   
        
    -- get any results
    select 
    datepart(mm,start_date) EVENT_MONTH_OF_YEAR,
    datename(month,start_date) MONTH_NAME ,
    event_year,
    count(*) as NUMEVENTS, 
    sum(isnull( suspects_killed, 0))   as  SUSPECTS_KILLED 
	into #results
    from cmp_event c
    inner join #docs d on c.id = d.cmp_event_id
    group by 
    event_year,
     datename(month,start_date) ,
     datepart(mm,start_date)
    
   update #months set SUSPECTS_KILLED = r.SUSPECTS_KILLED, NUMEVENTS = r.NUMEVENTS
   from  #months m 
   left join #results r on m.year_number = r.event_year and m.monthName = r.month_name
   where r.event_YEAR is not null
    
      select newid() ITEMID,  monthName + ' ' + right(year_number,2) as EVENT_MONTH_NAME, month_number EVENT_MONTH_OF_YEAR, year_number EVENT_YEAR, SUSPECTS_KILLED, NUMEVENTS
     from #months order by year_number, month_number
    
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
        
        
                   ">  </TSQLQuery>



        <TSQLQuery Name="ATTACKS_VERSUS_FATALTIES" SqlCommand="
     
       
select cmp_event_id 
		into #docs
      (JOIN_CONDITIONS)
      and start_date &gt; getdate()-365 AND event_Type = 'NSAG Attack'
        group by cmp_event_id
  

        

-- create list of months
	select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number,0 NUMEVENTS,0  SUSPECTS_KILLED, 0 NON_MILITANT_KILLED into #months 
	   delete from #months
	   declare @c int
	   set @c = 0;
	   while (@c &lt; 12)
	   begin
		insert into #months 
		select 
			  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
			, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
			, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))        
			, 0 
			, 0   
			, 0
		set @c = @c + 1
	   end
   
        
    -- get any results
    select 
    datepart(mm,start_date) EVENT_MONTH_OF_YEAR,
    datename(month,start_date) MONTH_NAME ,
    event_year,
    count(*) as NUMEVENTS, 
    sum(isnull( suspects_killed, 0))   as	SUSPECTS_KILLED ,
    sum(isnull( non_militant_killed,0)) as	NON_MILITANT_KILLED
	into #results
    from cmp_event c
    inner join #docs d on c.id = d.cmp_event_id
    group by 
    event_year,
     datename(month,start_date) ,
     datepart(mm,start_date)
    
   update #months set NON_MILITANT_KILLED = r.NON_MILITANT_KILLED, SUSPECTS_KILLED = r.SUSPECTS_KILLED, NUMEVENTS = r.NUMEVENTS
   from  #months m 
   left join #results r on m.year_number = r.event_year and m.monthName = r.month_name
   where r.event_YEAR is not null
    
      select newid() ITEMID,  NON_MILITANT_KILLED, monthName + ' ' + right(year_number,2) as EVENT_MONTH_NAME, month_number EVENT_MONTH_OF_YEAR, year_number EVENT_YEAR, SUSPECTS_KILLED, NUMEVENTS
     from #months order by year_number, month_number
        
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
        
                   ">  </TSQLQuery>



        <TSQLQuery Name="JTIC_DASHBOARD_ATTACKS_VERSUS_CASUALTIES_MONTHLY" SqlCommand="
                   (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
    -- used in the jtic dashbboard for the bar chart- which query is used depends on what timeframe 
          
select cmp_event_id 
		into #docs
        (JOIN_CONDITIONS)
	    and start_date &gt; getdate()-365 AND event_Type = 'NSAG Attack'
        group by cmp_event_id
   --select * from #docs
  

        

-- create list of months
	select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number,0 as NUMEVENTS, 0 as  NON_MILITANT_KILLED    into #months 
	   delete from #months
	   declare @c int
	   set @c = 0;
	   while (@c &lt; 12)
	   begin
		insert into #months 
		select 
			  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
			, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
			, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))        
			, 0 
			, 0   
			 
		set @c = @c + 1
	   end
   --`	select * from #months
        
    -- get any results
    select 
    datepart(mm,start_date) EVENT_MONTH_OF_YEAR,
    datename(month,start_date) MONTH_NAME ,
    event_year,
    count(*) as NUMEVENTS, 
    sum(isnull( NON_MILITANT_KILLED, 0))   as	NON_MILITANT_KILLED  
	into #results
    from cmp_event c
    inner join #docs d on c.id = d.cmp_event_id
    group by 
    event_year,
     datename(month,start_date) ,
     datepart(mm,start_date)
    --	select * from #results
    
   update #months set NON_MILITANT_KILLED = r.NON_MILITANT_KILLED,  NUMEVENTS = r.NUMEVENTS
   from  #months m 
   left join #results r on m.year_number = r.event_year and m.monthName = r.month_name
   where r.event_YEAR is not null
    
      select newid() ITEMID,  monthName + ' ' + convert(varchar(4),year_number) as EVENT_MONTH_NAME, month_number EVENT_MONTH_OF_YEAR, year_number EVENT_YEAR, NON_MILITANT_KILLED, NUMEVENTS
     from #months order by year_number , month_number 
     
     
 
        
                   ">  </TSQLQuery>


        <TSQLQuery Name="JTIC_DASHBOARD_ATTACKS_VERSUS_CASUALTIES_YEARLY" SqlCommand="
                   (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
    select cmp_event_id 
		into #docs
       (JOIN_CONDITIONS)
	and event_type = 'NSAG Attack'
    GROUP BY cmp_event_id
  
--select top 10 * from cmp_events
 declare @min_year int, @currentYear int
set @min_year = ( select min(event_year) from cmp_events where cmp_event_id in (select cmp_event_id from #docs) 
set @currentYear = ( select datepart(yyyy,getdate()) )
 
 
 select 
 newid() ITEMID, 
 count(*) NUMEVENTS,
 sum(isnull(NON_MILITANT_KILLED,0)) NON_MILITANT_KILLED,
 EVENT_YEAR  
 into #results
 from cmp_event 
 where id in (select cmp_event_id from #docs)
 group by event_year
 order by event_year 
 
 
 while @min_year &lt;= @currentYear
 begin
	if not exists(select * from #results where event_year = @min_year)
	insert into #results(itemid, numevents, NON_MILITANT_KILLED ,event_year) select newid(),0,0,@min_year;
	
	set @min_year = @min_year +1
 end
 select * from #results order by event_year 
 
     
     
 
        
                   ">  </TSQLQuery>


        <TSQLQuery Name="JTIC_DASHBOARD_ATTACKS_VERSUS_CASUALTIES_DAILY" SqlCommand="
                   
                   (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
     
          select cmp_event_id 
          into #docs
          (JOIN_CONDITIONS) 
          and event_type = 'NSAG Attack'
          and start_date &gt; getdate() - 31
          GROUP BY cmp_event_id
 
          select 
          newid() ITEMID, 
          count(*) NUMEVENTS,
          sum(isnull(NON_MILITANT_KILLED,0)) NON_MILITANT_KILLED,
          left(start_date,12) START_DATE 
          from cmp_event 
          where id in (select cmp_event_id from #docs)
          group by start_date
          order by cmp_event.start_date  
        
                   ">  </TSQLQuery>



        <TSQLQuery Name="EVENT_SIGNIFICANCE" SqlCommand="
     
     
      
select cmp_event_id
		into #docs
      (JOIN_CONDITIONS)
      and start_date &gt; getdate()-365
        group by cmp_event_id
  

        

-- create list of months
	select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number,0 NUMEVENTS, cast(''  as varchar(30)) as Significance into #months 
	   delete from #months
	   declare @c int
	   set @c = 0;
	   while (@c &lt; 12)
	   begin
		insert into #months 
		select 
			  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
			, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
			, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))        
			, 0 
			, ''
		set @c = @c + 1
	   end
   
        
    -- get any results
    select 
    datepart(mm,start_date) EVENT_MONTH_OF_YEAR,
    datename(month,start_date) MONTH_NAME ,
    event_year,
    count(*) as NUMEVENTS, 
    Significance
	into #results
    from cmp_event c
    inner join #docs d on c.id = d.cmp_event_id
    group by 
    event_year,
     datename(month,start_date) ,
     datepart(mm,start_date),
     Significance
     
     
     
     --matrix of all possibilities
		
		select distinct significance into #types from cmp_event 
    inner join #docs d on cmp_event.id = d.cmp_event_id
		-- select * from #types
		-- select * from #matrix
		-- select * from #months
     
		selecT t.significance, m.monthName, m.month_number, year_number, numevents 
		into #matrix 
		from #months m cross join #types t 
		
        
    --select * from #results
    -- select * from #matrix; select * from #results;select * from #months;
    --select * from #months
   update #matrix set  NUMEVENTS = m.NUMEVENTS 
   from  #matrix x 
   left join #results m on x.year_number = m.event_year and m.month_Name = x.monthname and m.Significance = x.Significance
   where m.event_YEAR is not null
    
    
 select newid() ITEMID, monthName + ' ' + right(year_number,2) as EVENT_MONTH_NAME, 
      month_number EVENT_MONTH_OF_YEAR, year_number EVENT_YEAR, SIGNIFICANCE, NUMEVENTS
     from #matrix order by SIGNIFICANCE, EVENT_YEAR, EVENT_MONTH_OF_YEAR
     
                   
                   
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
                   
                   ">  </TSQLQuery>






        
        <TSQLQuery Name="JTICCHART_ATTACK_SCALE" SqlCommand="
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
     
       
                  
select cmp_event_id , attack_scale
		into #docs
       (JOIN_CONDITIONS)
       and start_date &gt; getdate()-365 and attack_scale is not null
        group by cmp_event_id, attack_scale
		--select * from #docs  

        

-- create list of months
	select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number,0 NUMEVENTS, cast(''  as varchar(30)) as attack_scale into #months 
	   delete from #months
	   declare @c int
	   set @c = 0;
	   while (@c &lt; 12)
	   begin
		insert into #months 
		select 
			  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
			, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
			, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))        
			, 0 
			, ''
		set @c = @c + 1
	   end
	-- select * from #months
        
    -- get any results
    select 
    datepart(mm,start_date) EVENT_MONTH_OF_YEAR,
    datename(month,start_date) MONTH_NAME ,
    event_year,
    count(*) as NUMEVENTS, 
    d.attack_scale
	into #results
    from cmp_events c
    inner join #docs d on c.cmp_event_id = d.cmp_event_id
    group by 
    event_year,
     datename(month,start_date) ,
     datepart(mm,start_date),
     d.attack_scale
	-- select * from #results
     
     
     
     --matrix of all possibilities
		
		select distinct attack_scale into #types from #results
		-- select * from #types
		-- select * from #matrix
		-- select * from #months
     
		selecT t.attack_scale, m.monthName, m.month_number, year_number, numevents 
		into #matrix 
		from #months m cross join #types t 
		
        
    --select * from #results
    -- select * from #matrix; select * from #results;select * from #months;
    --select * from #months
   update #matrix set  NUMEVENTS = m.NUMEVENTS 
   from  #matrix x 
   left join #results m on x.year_number = m.event_year and m.month_Name = x.monthname and m.attack_scale = x.attack_scale
   where m.event_YEAR is not null
    
    select newid() ITEMID,   monthName + ' ' + right(year_number,2) as EVENT_MONTH_NAME, 
      month_number EVENT_MONTH_OF_YEAR, year_number EVENT_YEAR, attack_scale, NUMEVENTS
     from #matrix order by attack_scale, EVENT_YEAR, EVENT_MONTH_OF_YEAR 
                   
                   
                   ">  </TSQLQuery>




        <TSQLQuery Name="EVENTS_BY_TYPE_12" SqlCommand="
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
     
       
select cmp_event_id  
		into #docs
       (JOIN_CONDITIONS)
       and start_date &gt; getdate()-365  
        group by cmp_event_id 
		--select * from #docs  

        

-- create list of months
	select 'JanuaryIsTheFirst' as monthName, 12 as month_number, 2099 as year_number,0 NUMEVENTS, cast(''  as varchar(30)) as event_type into #months 
	   delete from #months
	   declare @c int
	   set @c = 0;
	   while (@c &lt; 12)
	   begin
		insert into #months 
		select 
			  datename(month, DateAdd(mm,-1 * @C , getdate() ))   
			, datepart(mm, DateAdd(mm,-1 * @C , getdate() )) 
			, datepart(yyyy, DateAdd(mm,-1 * @C , getdate() ))        
			, 0 
			, ''
		set @c = @c + 1
	   end
	-- select * from #months
        
    -- get any results
    select 
    datepart(mm,start_date) EVENT_MONTH_OF_YEAR,
    datename(month,start_date) MONTH_NAME ,
    event_year,
    count(*) as NUMEVENTS, 
     event_type
	into #results
    from cmp_events c
    inner join #docs d on c.cmp_event_id = d.cmp_event_id
    group by 
    event_year,
     datename(month,start_date) ,
     datepart(mm,start_date),
     event_type
	-- select * from #results
     
     
     
     --matrix of all possibilities
		
		select distinct event_type into #types from #results
		-- select * from #types
		-- select * from #matrix
		-- select * from #months
     
		selecT t.event_type, m.monthName, m.month_number, year_number, numevents 
		into #matrix 
		from #months m cross join #types t 
		
        
    --select * from #results
    -- select * from #matrix; select * from #results;select * from #months;
    --select * from #months
   update #matrix set  NUMEVENTS = m.NUMEVENTS 
   from  #matrix x 
   left join #results m on x.year_number = m.event_year and m.month_Name = x.monthname and m.event_type = x.event_type
   where m.event_YEAR is not null
    
    select newid() ITEMID,   monthName + ' ' + right(year_number,2) as EVENT_MONTH_NAME, 
      month_number EVENT_MONTH_OF_YEAR, year_number EVENT_YEAR, event_type, NUMEVENTS
     from #matrix order by event_type, EVENT_YEAR, EVENT_MONTH_OF_YEAR
     
     
               
                   
                   ">  </TSQLQuery>



        <TSQLQuery Name="ALL_EVENTS_BY_DAY" SqlCommand="
     
      -- (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
        

select cmp_event_id  
		into #docs
      (JOIN_CONDITIONS)  
        group by cmp_event_id
		--select * from #docs  

        
-- get the min start date and max date
declare @min_date datetime,@max_date datetime, @numDays int, @c int
set @min_date = (select min(start_date) from cmp_event inner join #docs d on cmp_event.id = d.cmp_event_id)
set @max_date = (select max(start_date) from cmp_event inner join #docs d on cmp_event.id = d.cmp_event_id)

-- create table of dates
select getdate() date, 100000 numevents into #matrix 
delete from #matrix

set @numDays = (select DATEDIFF(dd,@min_date,@max_date))
set @c = 0
while (@c &lt; @numDays)
begin
	insert into #matrix 
	select dateadd(dd,@c,@min_date), 0
	set @c =  @c + 1
end


update #matrix set numevents = t.numevents from #matrix m
inner join 
(
	select count(*) numevents, start_date from cmp_event 
	 inner join #docs d on cmp_event.id = d.cmp_event_id
	group by start_date
) t on date = t.start_date

select newid() itemId,  datename(weekday,date) + ' ' +   convert(varchar(30),date,107)  start_date, NUMEVENTS  from #matrix 
 

               
                   
                   ">  </TSQLQuery>





        <TSQLQuery Name="FATALITIES_PER_COUNTRY_PER_YEAR" SqlCommand="
          select cmp_event_id INTO #DOCS
                
       (JOIN_CONDITIONS)   
               GROUP BY cmp_event_id
              declare @maxYear int ,@minYear int
              set @maxYear = (select max(event_year)  from cmp_event e inner join #docs d on e.id = d.cmp_event_id)
              set @minYear = (select min(event_year)  from cmp_event e inner join #docs d on e.id = d.cmp_event_id)
              select @maxyear as Year into #yrs 
              delete from #yrs
              while(@maxYear >= @minYear)
              begin
				insert into #yrs select @maxYear
				set @maxyear = @maxyear -1;
              End
                
               
               
              select distinct event_country into #countries  from cmp_event e 
              inner join #docs d on e.id = d.cmp_event_id
              
              
              
              select newid() ITEMID, event_country, event_year, sum(isnull(total_killed,0)) as total_killed
              into #results 
              from cmp_event e 
              inner join #docs d on e.id = d.cmp_event_id
              where event_country is not null 
              group by event_country, event_year
              order by event_country, event_year
         
			 
			 
			 insert into #results (event_country,event_year,total_killed) 
			  select   alloptions.event_country ,alloptions.[year],0     from ( select  [YEAR], event_country   from #countries   cross join #yrs ) 
              AllOptions 
              left join #results r on AllOptions.event_country = r.event_country and AllOptions.[year] = r.event_year
              where r.event_year is null
              
          
              select * from #results order by event_country, event_year 
              
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>



        <TSQLQuery Name="LOG_FATALITIES_PER_MONTH" SqlCommand="
          select cmp_event_id INTO #DOCS
                (JOIN_CONDITIONS)
                GROUP BY cmp_event_id
               
 select  log(sum(isnull(total_killed,0))) as total_killed,
  convert(varchar(10),datepart( year,start_date)) + ' - ' + case  when datepart( mm,start_date) > 9 then '' else '0' end +   convert(varchar(10),datepart( mm,start_date)) as YearMonth 
   from cmp_event e
   inner join #docs d on e.id = d.cmp_event_id
  group by 
 convert(varchar(10),datepart( year,start_date)) + ' - ' + case when datepart( mm,start_date)  > 9 then '' else '0' end +   convert(varchar(10),datepart( mm,start_date)) 
  having   sum(isnull(total_killed,0)) >0
  order by convert(varchar(10),datepart( year,start_date)) + ' - ' + case when datepart( mm,start_date)  > 9 then '' else '0' end +   convert(varchar(10),datepart( mm,start_date)) desc
              
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>

        <TSQLQuery Name="EVENTS_PER_DAY_HISTK" RunInPreFetch="true" SqlCommand="
          select cmp_event_id INTO #DOCS
                (JOIN_CONDITIONS)
                GROUP BY cmp_event_id
               
  SELECT newid() ITEMID, START_DATE, count(*) NUMEVENTS 
  FROM cmp_event c
  inner join #docs d on c.id = d.cmp_event_id
  GROUP BY start_date
  ORDER BY start_date  
  
                 (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)">
        </TSQLQuery>

 

        <TSQLQuery Name="GENERIC_TREE" SqlCommand="
                   IF ((TOP_X))
                    BEGIN                   
                         SELECT (OBSERVE_MAX_ITEMS)  count(*) COUNT, GENERIC_TREE_ATTRIBUTE from 
                        (
                          SELECT  GENERIC_TREE_ATTRIBUTE, cmp_event_id
                          (JOIN_CONDITIONS)
                          AND GENERIC_TREE_ATTRIBUTE &lt;> '' AND GENERIC_TREE_ATTRIBUTE &lt;> 'Unknown' AND GENERIC_TREE_ATTRIBUTE IS NOT NULL
                          group by GENERIC_TREE_ATTRIBUTE, cmp_event_id
                        ) g1
                        group by GENERIC_TREE_ATTRIBUTE
                         (ORDER_BY)ORDER BY COUNT(*) DESC(END_ORDER_BY)
                    END
                    ELSE
                    BEGIN
                        SELECT count(*) COUNT, GENERIC_TREE_ATTRIBUTE from 
                        (
                          SELECT GENERIC_TREE_ATTRIBUTE, cmp_event_id
                          (JOIN_CONDITIONS)
                          AND GENERIC_TREE_ATTRIBUTE &lt;> '' AND GENERIC_TREE_ATTRIBUTE &lt;> 'Unknown' AND GENERIC_TREE_ATTRIBUTE IS NOT NULL
                          group by GENERIC_TREE_ATTRIBUTE, cmp_event_id
                        ) g1
                        group by GENERIC_TREE_ATTRIBUTE
                        (ORDER_BY)ORDER BY GENERIC_TREE_ATTRIBUTE(END_ORDER_BY)
                     END
        
                    (DONT_ADD_ORDERBY)(DONT_PAGE_DATA)
                    " >
        </TSQLQuery>


          <TSQLQuery Name="KmzExportQuery" SqlCommand="
        -- get the qualifying records
        SELECT  e.cmp_event_id 
        INTO #docs 
        (JOIN_CONDITIONS) 
        GROUP BY e.cmp_event_id
        
        create clustered index ixodskosdkoskdoskdokds on #docs(cmp_event_id);
      
        --(PAGED_DATA_INTO_RESULTS_TABLE) -- this inserts paged data into temp table
                   
        (START_PAGING) SELECT e.id
        FROM cmp_event e 
        -- note as its cmp_event not events, we cannot order on too much
		    INNER JOIN #docs d ON e.id = d.cmp_event_id

        (END_PAGING)
  
        -- NOW WE HAVE #RESULTS SO WE CAN GO AND GET THE DATA
                   
      SELECT 
          e.id as itemid, 
          e.source_type, 
          CASE WHEN e.source_type = 'Terrorism and Insurgency' THEN 
            e.event_id 
          ELSE 
            e.id 
          END AS event_id,
          e.event_type,
          e.EventActionType,
          e.EventActionSubType,
          e.headline,
          CASE CHARINDEX('Source link : ', e.description) WHEN 0 THEN e.description ELSE SUBSTRING(e.description, 0, CHARINDEX('Source link : ', e.description)) END AS Description,
          e.significance,
          sd.TargetSector,
          sd.tactic,
          sd.Attack_Scale,
          sd.Source_Publication,
          e.event_country,
          sd.Region,
          sd.Province_Name,
          sd.District_Name,
          e.suspects_wounded,
          e.suspects_killed,
          e.suspects_detained,
          e.security_forces_killed,
          e.security_forces_WOUNDED,
          e.security_forces_detained,
          e.civilian_wounded,
          e.civilian_killed,
          e.civilian_detained,
          e.civilian_sf_wounded,
          e.civilian_sf_killed,
          e.civilian_sf_detained,
          e.unidentified_wounded,
          e.unidentified_killed,
          e.unidentified_detained,
          e.International,
          sd.CTSTATEMENT_TYPE,
          sd.NSAG_STATEMENT,
          sd.NSAG_ACTION_TYPE,
          sd.CT_FORCE,
          sd.ARMS_SEIZED_DESTROYED,
          sd.CT_OP_TYPE,
          sd.CT_ASSETS,
          sd.FORMAL_CHARGES,
          sd.CONVICTIONS,
          sd.ACQUITTALS,
          sd.EXTRADITIONS,
          sd.APPEALS,
          sd.OTHER_RESTRAINING_ORDERS,
          e.E_LATITUDE, 
          e.E_LONGITUDE, 
          (SELECT TOP(1) [event_type_id] FROM CMP_Events e2 WHERE d.id = e2.cmp_event_id) AS event_type_id,
		  CASE (SELECT TOP(1) [event_type_id] FROM CMP_Events e2 WHERE d.id = e2.cmp_event_id) WHEN 4 THEN
			(SELECT TOP(1) [tax_node_id] FROM event_taxonomy t JOIN NSAG_ACTION a ON t.TAX_NODE_ID = a.NSAG_ACTION_TYPE_ID WHERE a.event_id = e.event_id) 
          ELSE 
            NULL 
          END AS NsagActionTypeCode,
		  case (SELECT TOP(1) [event_type_id] FROM CMP_Events e2 WHERE d.id = e2.cmp_event_id) WHEN 3 THEN
			(SELECT TOP(1) [tax_node_id] FROM event_taxonomy t JOIN NSAG_ATTACK a ON t.TAX_NODE_ID = a.NSAG_ATTACK_TACTIC_ID WHERE a.event_id = e.event_id) 
          ELSE 
            NULL 
          END AS AttackTacticCode,
		  case (SELECT TOP(1) [event_type_id] FROM CMP_Events e2 WHERE d.id = e2.cmp_event_id) WHEN 6 THEN
			(SELECT TOP(1) [tax_node_id] FROM event_taxonomy t JOIN COUNTER_TERRORISM_OPERATION o ON t.TAX_NODE_ID = o.CT_OPERATION_TYPE_ID WHERE o.event_id = e.event_id) 
          ELSE 
            NULL 
          END AS CTOperationTypeCode,
          e.start_date,
          e.end_date,
          CASE CHARINDEX('Source link : ', e.description) WHEN 0 THEN NULL ELSE SUBSTRING(e.description, CHARINDEX('Source link : ', e.description) + 14, LEN(e.description)) END AS SourceLink,
          CASE WHEN e.source_type = 'Terrorism and Insurgency' THEN (SELECT l.offset_distance FROM EVENT_LOCATION l WHERE l.event_id = e.event_id) ELSE NULL END AS OffsetDistance,
          CASE WHEN e.source_type = 'Terrorism and Insurgency' THEN (SELECT du.Name FROM EVENT_LOCATION l JOIN DISTANCE_UNIT du ON l.UNIT_ID = du.UNIT_ID WHERE l.event_id = e.event_id) ELSE NULL END AS DistanceUnits,
          sd.Target_Environment,
          sd.ATTACK_PLATFORM + '; Suicide:' + sd.SUICIDE_ATTACK AS Attack_Mode,
          sd.TargetObjects + ' from' + sd.TargetNation AS AttackNarrative,
          sd.NSAG_MEDIUM,
          CASE WHEN e.source_type = 'Terrorism and Insurgency' THEN 
            (SELECT STUFF((SELECT ', ' + CONVERT(VARCHAR(10), er.event_id2) FROM event_relation er WHERE er.event_id = e.event_id GROUP BY er.event_id2 FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 2, '')) 
          ELSE
            NULL
          END AS RelatedEvent,
          sd.[EVENTACTORREGION],
          sd.[EventActorParentOrg],
          sd.[EventActorRole],
          sd.[EventActorScope],
          sd.[EventActorType],
          sd.[EventActorOrientation],
          sd.[EventActorNationality],
          sd.[EventActorName]
          
      FROM cmp_event e
      INNER JOIN cmp_event_stuffedData sd ON e.id = sd.cmp_event_id
      INNER JOIN #results d ON e.id = d.id">
              
          </TSQLQuery>

          <!--
        IndexerCreation query makes sure all the attributes are available at the start 
        recall the dynamic attribute creation
        doesn't actually get used in the cmp apart from pre-fetch
      -->
        <TSQLQuery Name="IndexerCreation" RunInPreFetch="true" SqlCommand=" 
    SELECT TOP 1 
     
    --mapping
    
    100 as MAP_ZOOM_LEVEL,
    100.000006 as MIN_X,
    100.000006 as LAT, -- default attributes used by map code
    100.000006 as LONG, -- default attributes used by map code
    100.000006 as MIN_Y,
    100.000006 as MAX_X,
    100.000006 as MAX_Y, 
    500 as MAX_ITEMS,
    space(50) as PLACE, -- generic term to hold various geographical entitiy names like usa, wiltshire etc
    SPACE(50) as GEO_FIELD, -- used to indicate what level 
     space(50) as EVENT_REGION,
     space(50) as EVENT_PROVINCE,
     space(50) as PROVINCE,
     
    SPACE(50) as EVENTACTORREGION_ACTIVE 
  , SPACE(50) as EVENTACTORPARENTORG_ACTIVE 
  , SPACE(50) as EVENTACTORROLE_ACTIVE 
  , SPACE(50) as EVENTACTORSCOPE_ACTIVE 
  , SPACE(50) as EVENTACTORTYPE_ACTIVE 
  , SPACE(50) as EVENTACTORORIENTATION_ACTIVE 
  , SPACE(50) as EVENTACTORNATIONALITY_ACTIVE 
  , SPACE(50) as EVENTACTORNAME_ACTIVE 
  
   , SPACE(50) as EVENTACTORREGION_Passive 
  ,  SPACE(50) as EVENTACTORPARENTORG_PASSIVE 
  , SPACE(50) as EVENTACTORROLE_PASSIVE 
  , SPACE(50) as EVENTACTORSCOPE_PASSIVE 
  , SPACE(50) as EVENTACTORTYPE_PASSIVE 
  , SPACE(50) as EVENTACTORORIENTATION_PASSIVE 
  , SPACE(50) as EVENTACTORNATIONALITY_PASSIVE 
  , SPACE(50) as EVENTACTORNAME_PASSIVE ,
  
	event_id  ,  
	start_date, 
	end_date,  
	created, 
	post_date, 
	published, 
	headline, 
	'EXAMPLE STRING' as description,
	event_type, 
  event_type_id,
	event_year,
  10000000 as GROUPEDCOUNT,-- substitute for count
  0 AS TOTAL_CASUALTIES,
Attack_Weapon,
AttackDeviceCount,
Suicide_attack,
Attack_Platform,
'AttackMode is platform and then weapon' ATTACK_MODE,
TargetNation, 
TargetObjects ,
TargetParentSector,
TargetSector,
Tactic,
Target_Environment,
Attack_Scale,
 
EventActorParentOrg,
EventActorRole,
EventActorScope,
EventActorType,
EventActorOrientation ,
EventActorNationality,
EventActorName, 
	 
source_medium,
 Source_publication,
	 
event_country,  
location_quality,
location_name,
Province_name, 
district_code, 
district_name , 
significance, 
 
suspects_wounded,
suspects_killed,
suspects_detained,
security_forces_killed,
security_forces_WOUNDED,
security_forces_detained,
civilian_wounded,
civilian_killed,
civilian_detained,
civilian_sf_wounded,
civilian_sf_killed,
civilian_sf_detained,
unidentified_wounded,
unidentified_killed,
unidentified_detained,
non_militant_wounded,
non_militant_killed,
total_killed,
total_wounded,
incident_count,
repeat_incident,
	
International,
CTSTATEMENT_TYPE,
NSAG_MEDIUM,
NSAG_STATEMENT,

NSAG_ACTION_TYPE,
region
,CT_FORCE
,ARMS_SEIZED_DESTROYED
 ,CT_OP_TYPE 
 ,ct_op_type as CTOPERATION_TYPE
  ,ct_op_env
  ,CT_ASSETS
  ,'2000-01' as YEARMONTH 
  ,datePart(ww,start_date) as EVENT_WEEK_OF_YEAR
  ,datePart(mm,start_date) as EVENT_MONTH_OF_YEAR
  ,datePart(dd,start_date) as EVENT_DAY_OF_MONTH
  , 'THISWILLBETHEMONTHNAME' as EVENT_MONTH_NAME
  ,
  	 FORMAL_CHARGES,
	CONVICTIONS,
	ACQUITTALS,
	EXTRADITIONS,
	APPEALS,
	OTHER_RESTRAINING_ORDERS,
  E_LATITUDE,
  E_LONGITUDE,
  source_type,
  id,
  space(50) as url_prefix,
  EventActionType,
  EventActionSubType,
  AdditionalFlag,
  cmp_event_id,
  0 AS NsagActionTypeCode,
  0 AS AttackTacticCode,
  0 AS CTOperationTypeCode,
  SPACE(50) AS SourceLink,
  0 AS OffsetDistance,
  SPACE(50) AS DistanceUnits,
  SPACE(50) AS AttackNarrative
                   (JOIN_CONDITIONS) 
                          ">
        </TSQLQuery>
        
                  
      </TSQLQueries>
      
      <Entitlements>
        <Entitlement AuthName="JTIC" AuthNameColumnName="e.source_type" AuthNameValue="'Terrorism and Insurgency'">
          <Filters>
            <EntitlementFilter Name="JanesCountry" ColumnName="e.country_iso_2" />
          </Filters>
        </Entitlement>
        <Entitlement AuthName="JIEV" AuthNameColumnName="e.source_type" AuthNameValue="'Intelligence Events'">
          <Filters>
            <EntitlementFilter Name="JanesCountry" ColumnName="e.country_iso_2" />
          </Filters>
        </Entitlement>
        <!-- JTREV & JINTEV = EVENTS only-->
        <Entitlement AuthName="JTEREV" AuthNameColumnName="e.source_type" AuthNameValue="'Terrorism and Insurgency'">
          <Filters>
            <EntitlementFilter Name="JanesCountry" ColumnName="e.country_iso_2" />
          </Filters>
        </Entitlement>
        <Entitlement AuthName="JINTEV" AuthNameColumnName="e.source_type" AuthNameValue="'Intelligence Events'">
          <Filters>
            <EntitlementFilter Name="JanesCountry" ColumnName="e.country_iso_2" />
          </Filters>
        </Entitlement>
      </Entitlements>
        
      <Metadata>
        <MetadataEntryOfStringString Key="entitlementProductName" Value="JTIC"/>
        <MetadataEntryOfStringString Key = "entitlementSubProducts" Value="JIEV,JTEREV,JINTEV"/>
        <MetadataEntryOfStringString Value="IHS Jane's"  Key="resourceKey"/>
        <MetadataEntryOfStringString Value="false" Key="visibleBreadcrumb" />
        <MetadataEntryOfStringString Value="e.*" Key="FullTextSearchAlias" />
        <MetadataEntryOfStringString Value="start_date|DESC" Key="DefaultSort" />
      </Metadata>
      <HintReplacements>
        <HintReplacement Hint="(TOP_X)" DefaultReplacement="1=0">
          <IndexerHintReplacement IndexerObjectKey="TOP_X" Sql="1=1" />
        </HintReplacement>
      </HintReplacements>
      <Parameters>
        <AdapterParameter CodeName="ITEMID" SQLName="e.cmp_event_id" DataType="STRING_TYPE" />
        <AdapterParameter CodeName="EVENT_ID" SQLName="e.event_id" DataType="STRING_TYPE" />
        <AdapterParameter CodeName="EVENT_WEEK_OF_YEAR" SQLName=" datePart(ww,start_date) " DataType="STRING_TYPE" />
        <AdapterParameter CodeName="EVENT_MONTH_OF_YEAR" SQLName=" datePart(mm,start_date) " DataType="STRING_TYPE" />
        <AdapterParameter CodeName="EVENT_DAY_OF_MONTH" SQLName=" datePart(dd,start_date) " DataType="STRING_TYPE" />
        <AdapterParameter CodeName="YEARMONTH" SQLName=" convert(varchar(4),event_year) + ' ' + convert(varchar(2),datePart(mm,start_date)) " DataType="STRING_TYPE" />
        <AdapterParameter CodeName="E_LATITUDE" SQLName=" E_LATITUDE " DataType="STRING_TYPE" />
        <AdapterParameter CodeName="E_LONGITUDE" SQLName=" E_LONGITUDE " DataType="STRING_TYPE" />
        <AdapterParameter CodeName="LAT" SQLName=" E_LATITUDE " DataType="STRING_TYPE" />
        <AdapterParameter CodeName="LONG" SQLName=" E_LONGITUDE " DataType="STRING_TYPE" />
        <AdapterParameter CodeName="LATLONGS" SQLName="E_LATITUDE|E_LONGITUDE" DataType="STRING_TYPE" />
        <AdapterParameter CodeName="GEOAREA" SQLName="E_LATITUDE|E_LONGITUDE" DataType="STRING_TYPE" />
        <AdapterParameter CodeName="CHART_METADATA_X" SQLName="CHART_METADATA_X" DataType="STRING_TYPE" />
        <AdapterParameter CodeName="CHART_METADATA_Y" SQLName="CHART_METADATA_Y" DataType="STRING_TYPE" />
        <AdapterParameter CodeName="CHART_METADATA_G" SQLName="CHART_METADATA_G" DataType="STRING_TYPE" />
        <AdapterParameter CodeName="CHART_METADATA_XCOUNT" SQLName="CHART_METADATA_XCOUNT" DataType="STRING_TYPE" />
        <AdapterParameter CodeName="CHART_METADATA_GCOUNT" SQLName="CHART_METADATA_GCOUNT" DataType="STRING_TYPE" />

      </Parameters>
    </TSQLCategory>
  </Categories>
</TSQLConfig>